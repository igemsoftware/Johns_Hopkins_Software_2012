/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.autogene.ui.main;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.*;
import java.beans.PropertyVetoException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import org.autogene.core.bio.entities.Plasmid;
import org.autogene.ui.cgview.ColorConstants;
import org.autogene.ui.cgview.DragAndDropUtils;
import org.autogene.ui.cgview.LogEventType;
import org.autogene.ui.cgview.Viewer;
import org.autogene.ui.design.FeatureDragger;
import org.autogene.ui.exportFASTA.ExportFASTA;
import org.autogene.ui.exportFASTA.ExportFASTAFrame;
import org.autogene.ui.exportGenBank.ExportGenBank;
import org.autogene.ui.exportGenBank.NewExportGenBankFrame;
import org.autogene.ui.exportSBOL.ExportSBOL;
import org.autogene.ui.exportSBOL.ExportSBOLFrame;
import org.autogene.ui.inputGenBankFrame.GenBankReaderForm;
import org.autogene.ui.inputcsvframe.ImportCsvFrame;
import org.autogene.ui.inputframe.AnnotationOptionsFrame;
import org.autogene.ui.inputframe.NewImportPlasmidFrame;
import org.autogene.ui.loggerframe.Log;
import org.autogene.ui.sessions.Environment;

/**
 *
 * Test
 * @author giovanni
 */
public class AutogeneFrame extends javax.swing.JFrame {
    private int registryWidth = 200, logHeight;
    
    ImageIcon plasmidReady, plasmidNotReady, plasmidAnnotating;
    
    public static String sourcePlasmidOfDrag; //we can only have one thing dragging at a time
                                              //this is the name of the plasmid
    
    public static void setSourcePlasmidOfDrag(String name) {
        sourcePlasmidOfDrag = name;
    }

    /**
     * Creates new form AutogeneFrame
     */
    public AutogeneFrame() {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(AutogeneFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(AutogeneFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(AutogeneFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(AutogeneFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        initComponents();        
      
       
        
        //Initializing the environment
        environment = new Environment(this);
        Environment.setDesktopPane(desktopPane);
        
        //Initialize other components
        initMyComponents();
        
        logHeight = 140;

        
        this.addComponentListener(new ComponentAdapter() {
            public void componentResized(ComponentEvent e) {
                updateSplitPaneDividers();
                previousWidth = getWidth();
                previousHeight = getHeight();
                //System.out.println("ancestor resized");
            }

           
        });
        
        getContentPane().addHierarchyBoundsListener(new HierarchyBoundsListener(){
 
            public void ancestorMoved(HierarchyEvent e) {
                //updateSplitPaneDividers();
                //previousWidth = getWidth();
                //previousHeight = getHeight();
            }
            
            public void ancestorResized(HierarchyEvent e) {
               
                
            }          
        });
        
        detailsButton.setEnabled(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new javax.swing.JPanel();
        splitPane = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        verticalSplitPane = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel3 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jToolBar4 = new javax.swing.JToolBar();
        annotateButton = new javax.swing.JButton();
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 32767));
        deletePlasmidButton = new javax.swing.JButton();
        filler6 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 32767));
        viewPlasmidButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        privateRegistryList = new javax.swing.JList();
        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        filler7 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        detailsButton = new javax.swing.JButton();
        desktopPane = new LogoDesktop();
        jToolBar3 = new javax.swing.JToolBar();
        jButton2 = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 32767));
        jButton3 = new javax.swing.JButton();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 32767));
        jButton4 = new javax.swing.JButton();
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 32767));
        jButton8 = new javax.swing.JButton();
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        jPanel6 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        logTextPane = new javax.swing.JTextPane();
        jToolBar2 = new javax.swing.JToolBar();
        clearLogButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        saveLogButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        importPlasmidMenuItem = new javax.swing.JMenuItem();
        importCsv = new javax.swing.JMenuItem();
        importGenBank = new javax.swing.JMenuItem();
        exportGenBank = new javax.swing.JMenuItem();
        exportFASTA = new javax.swing.JMenuItem();
        exportSBOL = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        viewMenu = new javax.swing.JMenu();
        viewLogMenuItem = new javax.swing.JMenuItem();
        cgviewDemoMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/autogene/ui/resources/lang/en"); // NOI18N
        setTitle(bundle.getString("autogene.frame.title")); // NOI18N

        panel.setLayout(new java.awt.BorderLayout());

        splitPane.setDividerLocation(450);
        splitPane.setDividerSize(5);
        splitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        splitPane.setOneTouchExpandable(true);
        splitPane.setPreferredSize(new java.awt.Dimension(124, 300));
        splitPane.setRequestFocusEnabled(false);
        splitPane.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                splitPanePropertyChange(evt);
            }
        });

        verticalSplitPane.setDividerLocation(300);
        verticalSplitPane.setOneTouchExpandable(true);
        verticalSplitPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                verticalSplitPaneMouseEntered(evt);
            }
        });
        verticalSplitPane.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                verticalSplitPaneMouseDragged(evt);
            }
        });
        verticalSplitPane.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                verticalSplitPanePropertyChange(evt);
            }
        });

        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.LINE_AXIS));

        jSplitPane1.setDividerLocation(200);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setOneTouchExpandable(true);

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Workspace"));
        jTabbedPane1.setAlignmentX(0.0F);

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jList1MousePressed(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Plasmids", jPanel5);

        jToolBar4.setFloatable(false);
        jToolBar4.setRollover(true);

        annotateButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/autogene/ui/resources/images/alignment.png"))); // NOI18N
        annotateButton.setEnabled(false);
        annotateButton.setFocusable(false);
        annotateButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        annotateButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        annotateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                annotateButtonActionPerformed(evt);
            }
        });
        jToolBar4.add(annotateButton);
        jToolBar4.add(filler5);

        deletePlasmidButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/autogene/ui/resources/images/closeall.png"))); // NOI18N
        deletePlasmidButton.setEnabled(false);
        deletePlasmidButton.setFocusable(false);
        deletePlasmidButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        deletePlasmidButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        deletePlasmidButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePlasmidButtonActionPerformed(evt);
            }
        });
        jToolBar4.add(deletePlasmidButton);
        jToolBar4.add(filler6);

        viewPlasmidButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/autogene/ui/resources/images/search.png"))); // NOI18N
        viewPlasmidButton.setEnabled(false);
        viewPlasmidButton.setFocusable(false);
        viewPlasmidButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        viewPlasmidButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        viewPlasmidButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewPlasmidButtonActionPerformed(evt);
            }
        });
        jToolBar4.add(viewPlasmidButton);

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jTabbedPane1)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jToolBar4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                .add(jToolBar4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jTabbedPane1))
        );

        jSplitPane1.setTopComponent(jPanel3);

        jTabbedPane2.setBorder(javax.swing.BorderFactory.createTitledBorder("Design Registry"));

        privateRegistryList.setDragEnabled(true);
        jScrollPane2.setViewportView(privateRegistryList);

        org.jdesktop.layout.GroupLayout jPanel7Layout = new org.jdesktop.layout.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("Private", jPanel7);

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jButton1.setText("Design");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);
        jToolBar1.add(filler7);

        detailsButton.setText("Details");
        detailsButton.setFocusable(false);
        detailsButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        detailsButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(detailsButton);

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jTabbedPane2)
            .add(jToolBar1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(jTabbedPane2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jToolBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        jSplitPane1.setRightComponent(jPanel4);

        jPanel2.add(jSplitPane1);

        verticalSplitPane.setRightComponent(jPanel2);

        desktopPane.setBackground(new java.awt.Color(101, 161, 242));
        verticalSplitPane.setLeftComponent(desktopPane);

        jToolBar3.setFloatable(false);
        jToolBar3.setRollover(true);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/autogene/ui/resources/images/folder.png"))); // NOI18N
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jToolBar3.add(jButton2);
        jToolBar3.add(filler1);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/autogene/ui/resources/images/import_data.png"))); // NOI18N
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jToolBar3.add(jButton3);
        jToolBar3.add(filler2);

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/autogene/ui/resources/images/save_data.png"))); // NOI18N
        jButton4.setFocusable(false);
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jToolBar3.add(jButton4);
        jToolBar3.add(filler3);

        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/autogene/ui/resources/images/ws_view.png"))); // NOI18N
        jButton8.setFocusable(false);
        jButton8.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton8.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar3.add(jButton8);
        jToolBar3.add(filler4);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(verticalSplitPane)
            .add(jToolBar3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .add(jToolBar3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(1, 1, 1)
                .add(verticalSplitPane))
        );

        splitPane.setTopComponent(jPanel1);

        jScrollPane3.setViewportView(logTextPane);

        jToolBar2.setFloatable(false);
        jToolBar2.setOrientation(1);
        jToolBar2.setRollover(true);

        clearLogButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/autogene/ui/resources/images/ws_del.png"))); // NOI18N
        clearLogButton.setFocusable(false);
        clearLogButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        clearLogButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        clearLogButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearLogButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(clearLogButton);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 5)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(238, 238, 238));
        jLabel1.setText(".");
        jToolBar2.add(jLabel1);

        saveLogButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/autogene/ui/resources/images/save_data.png"))); // NOI18N
        saveLogButton.setFocusable(false);
        saveLogButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveLogButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar2.add(saveLogButton);

        org.jdesktop.layout.GroupLayout jPanel6Layout = new org.jdesktop.layout.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel6Layout.createSequentialGroup()
                .add(jToolBar2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 754, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane3)
            .add(jToolBar2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
        );

        splitPane.setRightComponent(jPanel6);

        panel.add(splitPane, java.awt.BorderLayout.CENTER);

        getContentPane().add(panel, java.awt.BorderLayout.CENTER);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        importPlasmidMenuItem.setText("Import Plasmid");
        importPlasmidMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importPlasmidMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(importPlasmidMenuItem);

        importCsv.setText("Import Csv");
        importCsv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importCsvActionPerformed(evt);
            }
        });
        fileMenu.add(importCsv);

        importGenBank.setText("Import GenBank");
        importGenBank.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importGenBankActionPerformed(evt);
            }
        });
        fileMenu.add(importGenBank);

        exportGenBank.setForeground(java.awt.Color.gray);
        exportGenBank.setText("Export GenBank");
        exportGenBank.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportGenBankActionPerformed(evt);
            }
        });
        fileMenu.add(exportGenBank);

        exportFASTA.setForeground(java.awt.Color.gray);
        exportFASTA.setText("Export FASTA");
        exportFASTA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportFASTAActionPerformed(evt);
            }
        });
        fileMenu.add(exportFASTA);

        exportSBOL.setForeground(java.awt.Color.gray);
        exportSBOL.setText("Export SBOL");
        exportSBOL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportSBOLActionPerformed(evt);
            }
        });
        fileMenu.add(exportSBOL);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        viewMenu.setText("View");

        viewLogMenuItem.setText("Hide Log");
        viewLogMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewLogMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(viewLogMenuItem);

        cgviewDemoMenuItem.setText("View Plasmid");
        cgviewDemoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cgviewDemoMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(cgviewDemoMenuItem);

        menuBar.add(viewMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void importPlasmidMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importPlasmidMenuItemActionPerformed
        NewImportPlasmidFrame frame = new NewImportPlasmidFrame(this);
        frame.setEnvironment(environment);
        desktopPane.add(frame);
        frame.show();
            }//GEN-LAST:event_importPlasmidMenuItemActionPerformed

    private void viewLogMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewLogMenuItemActionPerformed
        /*if(Log.getProjectLog().isVisible()) {
            Log.getProjectLog().setVisible(false);
            viewLogMenuItem.setText("View Log");
        }
        else {
            Log.getProjectLog().setVisible(true);
            viewLogMenuItem.setText("Hide Log");
            //updateSplitPaneDividers();

        }
        * 
        */
    }//GEN-LAST:event_viewLogMenuItemActionPerformed

    private void cgviewDemoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cgviewDemoMenuItemActionPerformed
        try {
            Viewer frame = new Viewer(Environment.getWorkspacePlasmids().get(0), this);
            //PlasmidViewFrame frame = new PlasmidViewFrame(environment);
            //DemoCGView frame = new DemoCGView();
            desktopPane.add(frame);
            frame.show();
            frame.setMaximum(true);
        } catch (PropertyVetoException ex) {
            Logger.getLogger(AutogeneFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cgviewDemoMenuItemActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //DesignFrame df = new DesignFrame();
        FeatureDragger fd = new FeatureDragger(this);
        desktopPane.add(fd);
        fd.show();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void importCsvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importCsvActionPerformed
        importCsvFile();
    }//GEN-LAST:event_importCsvActionPerformed

    private void importCsvFile() {
        ImportCsvFrame icf = new ImportCsvFrame(this);
        desktopPane.add(icf);
        icf.show();
    }
    
    private void exportGenBank() {
        if(exportGenBank.getForeground().equals(Color.BLACK)) {
            try {
                NewExportGenBankFrame egbf = new NewExportGenBankFrame(new ExportGenBank(), environment.getActivePlasmid());
                //egbf.setEnvironment(environment);
                //desktopPane.add(egbf);
                //egbf.show();
            }
            catch(PropertyVetoException e) {
                Log.addText("Failed to Open Window", LogEventType.FAILURE);
                e.printStackTrace();
            }       
        }
        else {
            Log.addText("Nothing to Export", LogEventType.FAILURE);
        }
    }
    
    private void exportGenBankActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportGenBankActionPerformed
        exportGenBank();
    }//GEN-LAST:event_exportGenBankActionPerformed

    private void importGenBank() {
        GenBankReaderForm gbrf = new GenBankReaderForm(this);
        gbrf.setEnvironment(environment);
        desktopPane.add(gbrf);
        gbrf.show();  
    }
    
    private void importGenBankActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importGenBankActionPerformed

           importGenBank();  
    }//GEN-LAST:event_importGenBankActionPerformed

    private void exportFASTAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportFASTAActionPerformed
        if(exportFASTA.getForeground().equals(Color.BLACK)) {
            ExportFASTAFrame eff = new ExportFASTAFrame(new ExportFASTA());
            eff.setEnvironment(environment);
            desktopPane.add(eff);
            eff.show();
        }
        else {
            Log.addText("Nothing to Export", LogEventType.FAILURE);
        }
    }//GEN-LAST:event_exportFASTAActionPerformed

    int previousWidth = this.getWidth(), previousHeight = this.getHeight();
    private void verticalSplitPanePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_verticalSplitPanePropertyChange
       JSplitPane sourceSplitPane = (JSplitPane) evt.getSource();
        String propertyName = evt.getPropertyName();
        if (propertyName.equals(JSplitPane.LAST_DIVIDER_LOCATION_PROPERTY)) {
          int current = sourceSplitPane.getDividerLocation();
          if(getWidth() == previousWidth && getHeight() == previousHeight) {
              this.registryWidth = getWidth() - current;
              System.out.println("registry width: " + registryWidth);

          }
          //this.registryWidth = getWidth() - current;
          Integer last = (Integer) evt.getNewValue();
          //System.out.println("Last: " + last);
          Integer priorLast = (Integer) evt.getOldValue();
          //System.out.println("Prior last: " + priorLast);
        }
      
    }//GEN-LAST:event_verticalSplitPanePropertyChange

    private void verticalSplitPaneMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_verticalSplitPaneMouseDragged
       System.out.println("drag " + this.verticalSplitPane.getDividerLocation());
    }//GEN-LAST:event_verticalSplitPaneMouseDragged

    private void verticalSplitPaneMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_verticalSplitPaneMouseEntered
        System.out.println("mouse entered");
    }//GEN-LAST:event_verticalSplitPaneMouseEntered

    private void splitPanePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_splitPanePropertyChange
        JSplitPane sourceSplitPane = (JSplitPane) evt.getSource();
        String propertyName = evt.getPropertyName();
        if (propertyName.equals(JSplitPane.LAST_DIVIDER_LOCATION_PROPERTY)) {
          int current = sourceSplitPane.getDividerLocation();
          if(getWidth() == previousWidth && getHeight() == previousHeight) {
              this.logHeight = getHeight() - current;
              System.out.println("registry width: " + registryWidth);

          }
          //this.registryWidth = getWidth() - current;
          Integer last = (Integer) evt.getNewValue();
          //System.out.println("Last: " + last);
          Integer priorLast = (Integer) evt.getOldValue();
          //System.out.println("Prior last: " + priorLast);
        }
      
    }//GEN-LAST:event_splitPanePropertyChange

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        NewImportPlasmidFrame frame = new NewImportPlasmidFrame(this);
        frame.setEnvironment(environment);
        desktopPane.add(frame);
        frame.show();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jList1MouseClicked

    private void jList1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jList1MousePressed

    private void annotateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_annotateButtonActionPerformed
        
       annotateSelectedPlasmid();
       
    }//GEN-LAST:event_annotateButtonActionPerformed

    private void deletePlasmidButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePlasmidButtonActionPerformed
        deleteSelectedPlasmidOrFeature();
    }//GEN-LAST:event_deletePlasmidButtonActionPerformed

    private void clearLogButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearLogButtonActionPerformed
        Log.clearLog();
    }//GEN-LAST:event_clearLogButtonActionPerformed

    private void viewPlasmidButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewPlasmidButtonActionPerformed
        int index = jList1.getSelectedIndex();
        viewPlasmid(index);
    }//GEN-LAST:event_viewPlasmidButtonActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        importCsvFile();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        exportGenBank();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void exportSBOLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportSBOLActionPerformed
        // TODO add your handling code here:
        if(exportSBOL.getForeground().equals(Color.BLACK)) {
            ExportSBOLFrame esf = new ExportSBOLFrame(new ExportSBOL());
            esf.setEnvironment(environment);
            desktopPane.add(esf);
            esf.show();
        }
    }//GEN-LAST:event_exportSBOLActionPerformed

    //view a plasmid at index "index" in the plasmid list
    public void viewPlasmid(int index) {
        if(index == -1)
            return;
        
        
        Viewer frame = new Viewer(Environment.getWorkspacePlasmids().get(index), this);
        environment.setActivePlasmid(Environment.getWorkspacePlasmids().get(index));
                    
                    //color in the exportGenBank and exportFASTA menuItems when there is an active plasmid 
                    //to export out. The menuItems are by default grayed out.
                    exportGenBank.setForeground(Color.BLACK);
                    exportFASTA.setForeground(Color.BLACK);
                    exportSBOL.setForeground(Color.BLACK);
                    
                    //System.out.println("got the activePlasmid");
                    desktopPane.add(frame);
                    frame.show();
                    try {
                        frame.setMaximum(true);
                    } catch (PropertyVetoException ex) {
                        Logger.getLogger(AutogeneFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
    }
    
    // instance variable
    private Environment environment;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JButton annotateButton;
    private javax.swing.JMenuItem cgviewDemoMenuItem;
    private javax.swing.JButton clearLogButton;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JButton deletePlasmidButton;
    private javax.swing.JDesktopPane desktopPane;
    private javax.swing.JButton detailsButton;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenuItem exportFASTA;
    private javax.swing.JMenuItem exportGenBank;
    private javax.swing.JMenuItem exportSBOL;
    private javax.swing.JMenu fileMenu;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private javax.swing.Box.Filler filler5;
    private javax.swing.Box.Filler filler6;
    private javax.swing.Box.Filler filler7;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem importCsv;
    private javax.swing.JMenuItem importGenBank;
    private javax.swing.JMenuItem importPlasmidMenuItem;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JToolBar jToolBar3;
    private javax.swing.JToolBar jToolBar4;
    private javax.swing.JTextPane logTextPane;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JPanel panel;
    private javax.swing.JList privateRegistryList;
    private javax.swing.JButton saveLogButton;
    private javax.swing.JSplitPane splitPane;
    private javax.swing.JSplitPane verticalSplitPane;
    private javax.swing.JMenuItem viewLogMenuItem;
    private javax.swing.JMenu viewMenu;
    private javax.swing.JButton viewPlasmidButton;
    // End of variables declaration//GEN-END:variables

    
    
    private void initMyComponents() {
        
        plasmidReady = new ImageIcon(getClass().getResource("/org/autogene/ui/resources/images/green-bullet.png"));
        plasmidAnnotating = new ImageIcon(getClass().getResource("/org/autogene/ui/resources/images/yellow-bullet.png"));
        plasmidNotReady = new ImageIcon(getClass().getResource("/org/autogene/ui/resources/images/red-bullet.png"));
        
        updateSizes();
        //System.out.println(logTextPane);
        Log log = Log.getLogObject(this,getWidth());
        log.setEnvironment(environment);
        Log.setProjectLog(log);
        Log.initText();
        
        updateSplitPaneDividers();
        
        //splitPane.setBottomComponent(log);
        
        initPlasmidList();
        
        initRegistry();
        
        
        
    }
    
    private void updateSizes() {
        setSize(1000,800);
        panel.setPreferredSize(new Dimension(getWidth(),getHeight()));
        splitPane.setSize(getWidth(), getHeight() - menuBar.getHeight() - environment.WINDOW_TOOLBAR_HEIGHT);
        splitPane.setPreferredSize(new Dimension(getWidth(), getHeight() - menuBar.getHeight() - environment.WINDOW_TOOLBAR_HEIGHT));
        
        
    }
    
    public JTextPane getLogTextPane() {
        return logTextPane;
    }

    private void updateSplitPaneDividers() {
        //System.out.println(splitPane.getHeight());
        //System.out.println(Log.getProjectLog().getHeight());
        splitPane.setDividerLocation(getHeight() - logHeight);
        verticalSplitPane.setDividerLocation(getWidth() - registryWidth);
    }
    
    public JDesktopPane getDesktopPane() {
        return desktopPane;
    }

    public JList getPrivateRegistryList() {
        return this.privateRegistryList;
    }
    
    public void addFeaturesToPrivateRegistry(ArrayList<String> featuresToAdd) {
        DefaultListModel listModel = (DefaultListModel)privateRegistryList.getModel();
        for(int i = 0; i < featuresToAdd.size(); i++) {
            listModel.addElement((String)featuresToAdd.get(i));
        }

    }

    public void annotateSelectedPlasmid() {
        if(jList1.getSelectedValue() == null)
            return;
        
         AnnotationOptionsFrame frame = new AnnotationOptionsFrame(this,(String)jList1.getSelectedValue());
        frame.setEnvironment(environment);
        desktopPane.add(frame);
        int gap = 10;
        int x = this.verticalSplitPane.getDividerLocation() - frame.getWidth() - gap;
        frame.setLocation(x,frame.getLocation().y);
        frame.show();
    }

    public void viewSelectedPlasmid() {
        this.viewPlasmid(jList1.getSelectedIndex());
    }

    public void deleteSelectedPlasmidOrFeature() {
        if(jList1.getSelectedIndex() != -1) {
            String name = (String)jList1.getSelectedValue();
            this.environment.removePlasmidFromWorkspace(name);
        }
        else if(privateRegistryList.getSelectedIndex() != -1) {
            int[] indices = privateRegistryList.getSelectedIndices();
            DefaultListModel model = (DefaultListModel) privateRegistryList.getModel();
            int ind = privateRegistryList.getSelectedIndex();
            for(int i = 0; i < indices.length; i++)
                model.removeElementAt(ind);
            
            
        }
    }



    
    private class PlasmidListMouseListener implements MouseListener {
        
        AutogeneFrame af;
        public PlasmidListMouseListener(AutogeneFrame a) {
            af = a;
        }

        @Override
        public void mouseClicked(MouseEvent e) {
            
            if (e.getClickCount() == 2) {
                    int index = jList1.locationToIndex(e.getPoint());
                    Plasmid p = Environment.getWorkspacePlasmidByName((String)jList1.getSelectedValue());
                    if(p.hasBegunAnnotating() == false) {
                        af.annotateSelectedPlasmid();
                    } else if(p.isAnnotating() == false) {
                        af.viewPlasmid(index);
                    } else {
                        JOptionPane.showMessageDialog(null, "The plasmid needs to finish annotating before you can view it.");
                    }
                } else if(e.getClickCount() == 1) {
                    privateRegistryList.clearSelection();
                }
        }

        @Override
        public void mousePressed(MouseEvent me) {
            int index = jList1.locationToIndex(me.getPoint());
            System.out.println(index);
            if(index != -1) {
                if(index != jList1.getSelectedIndex()) {
                    jList1.setSelectedIndex(index);
                }
                if(me.isPopupTrigger())
                    doPop(me);
            }
            
            if(jList1.getSelectedIndex() != -1) {
                annotateButton.setEnabled(true);
                deletePlasmidButton.setEnabled(true);
                viewPlasmidButton.setEnabled(true);
            } else {
                annotateButton.setEnabled(false);
                deletePlasmidButton.setEnabled(false);
                viewPlasmidButton.setEnabled(false);
            }
            
            if(privateRegistryList.getSelectedIndex() != -1) {
                deletePlasmidButton.setEnabled(true);
            }
        }

        @Override
        public void mouseReleased(MouseEvent me) {
            //if(me.isPopupTrigger())
            //    doPop(me);
        }

        @Override
        public void mouseEntered(MouseEvent me) {
            //throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public void mouseExited(MouseEvent me) {
            //throw new UnsupportedOperationException("Not supported yet.");
        }

        private void doPop(MouseEvent me) {
            PlasmidPopUpOption p = new PlasmidPopUpOption(af);
            p.show(me.getComponent(),me.getX(),me.getY());
        }
        
    }

    
    private class PrivateRegistryListMouseListener implements MouseListener {
        
        AutogeneFrame af;
        public PrivateRegistryListMouseListener(AutogeneFrame a) {
            af = a;
        }

        @Override
        public void mouseClicked(MouseEvent e) {
            //System.out.println("mouse clicked");
            af.setLastSourceWasList(true);
            if (e.getClickCount() == 2) {
                    
                    int index = privateRegistryList.locationToIndex(e.getPoint());
                    String s = (String) privateRegistryList.getModel().getElementAt(index);
                    
                    //first get the plasmid name. entries in the private registry list are of the form FEATURE_NAME (PLASMID_NAME)
                    int i = s.lastIndexOf("(");
                    String featureName = s.substring(0,i-1);
                    int j = s.lastIndexOf(")");
                    String name = s.substring(i+1,j);                
                    Plasmid p = Environment.getWorkspacePlasmidByName(name);
                    Viewer frame = new Viewer(p, af);
                    desktopPane.add(frame);
                    frame.show();
                    try {
                        frame.setMaximum(true);
                    } catch (PropertyVetoException ex) {
                        Logger.getLogger(AutogeneFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    frame.getPlasmidPanel().getCGView().colorFeatureWithName(featureName, ColorConstants.VIEW_FEATURE_FROM_PRIVATE_REGISTRY_COLOR);
                    frame.getPlasmidPanel().repaint();
                    
                     annotateButton.setEnabled(false);
                     viewPlasmidButton.setEnabled(false);
                     deletePlasmidButton.setEnabled(true);
                }
            else if(e.getClickCount() == 1) {
                jList1.clearSelection();
                   annotateButton.setEnabled(false);
                     viewPlasmidButton.setEnabled(false);
                                          deletePlasmidButton.setEnabled(true);

            }
            
        }

        @Override
        public void mousePressed(MouseEvent me) {
            ////throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public void mouseReleased(MouseEvent me) {
            //throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public void mouseEntered(MouseEvent me) {
            //throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public void mouseExited(MouseEvent me) {
            //throw new UnsupportedOperationException("Not supported yet.");
        }
        
    }

    private void initPlasmidList() {
        jList1.setModel(new PlasmidListModel());
        jList1.setCellRenderer(new MyCellRenderer());
        
  
        jList1.addMouseListener(new PlasmidListMouseListener(this));
    }
    
    public void updatePlasmidList() {
        jList1.setModel(new PlasmidListModel());
        jList1.setCellRenderer(new MyCellRenderer());
        if(jList1.getSelectedIndex() != -1) {
                annotateButton.setEnabled(true);
                deletePlasmidButton.setEnabled(true);
                viewPlasmidButton.setEnabled(true);
            } else {
                annotateButton.setEnabled(false);
                deletePlasmidButton.setEnabled(false);
                viewPlasmidButton.setEnabled(false);
            }
        
        
        if(privateRegistryList.getSelectedIndex() != -1)
            deletePlasmidButton.setEnabled(true);
        
    }
   
    boolean lastSourceWasList;

    public void setLastSourceWasList(boolean b) {
        lastSourceWasList = b;
        System.out.println("last source was list is now " + b);
    }

    private void initRegistry() {
        privateRegistryList.setModel(new DefaultListModel());
        privateRegistryList.setTransferHandler(new TransferHandler() {

            @Override
            public boolean canImport(TransferHandler.TransferSupport info) {
                // we only import Strings
                if (!info.isDataFlavorSupported(DataFlavor.stringFlavor)) {
                    return false;
                }

                JList.DropLocation dl = (JList.DropLocation)info.getDropLocation();
                if (dl.getIndex() == -1) {
                    return false;
                }
                return true;
            }

            @Override
            public boolean importData(TransferHandler.TransferSupport info) {
                               
                System.out.println("import data");
                if (!info.isDrop()) {
                    System.out.println("info is not drop");
                    return false;
                }
                                
                // Check for String flavor
                if (!info.isDataFlavorSupported(DataFlavor.stringFlavor)) {
                    //displayDropLocation("List doesn't accept a drop of this type.");
                    System.out.println("not flavor supported");
                    return false;
                }
                
                                    //check if we highlighted multiple indicies

                if(privateRegistryList.getSelectedIndices().length > 1) {
                        return false;
                    }
                
                
                JList.DropLocation dl = (JList.DropLocation)info.getDropLocation();
                DefaultListModel listModel = (DefaultListModel)privateRegistryList.getModel();
                int index = dl.getIndex();
                boolean insert = dl.isInsert();
                // Get the current string under the drop.
                //String value = (String)listModel.getElementAt(index);

                // Get the string that is being dropped.
                Transferable t = info.getTransferable();
                ArrayList<String> data = DragAndDropUtils.getNameAssumingFromFeatureTable(t, AutogeneFrame.sourcePlasmidOfDrag);
                //data += " (" + AutogeneFrame.sourcePlasmidOfDrag + ")";
                if(data == null) {
                    System.out.println("data is null");
                    return false;
                }
                
                System.out.println(data);
                
                // Display a dialog with the drop information.
                String dropValue = "\"" + data + "\" dropped ";
                if (dl.isInsert()) {
                    System.out.println("is insert");
                    if (dl.getIndex() == 0) {
                       // displayDropLocation(dropValue + "at beginning of list");
                    } else if (dl.getIndex() >= privateRegistryList.getModel().getSize()) {
                        //displayDropLocation(dropValue + "at end of list");
                    } else {
                        //String value1 = (String)privateRegistryList.getModel().getElementAt(dl.getIndex() - 1);
                        //String value2 = (String)privateRegistryList.getModel().getElementAt(dl.getIndex());
                       // System.out.println(dropValue + "between \"" + value1 + "\" and \"" + value2 + "\"");
                    }
                } else {
                    System.out.println("is not insert");
                    listModel.set(index,data.get(0));
                    for(int p = 1; p < data.size(); p++) {
                        listModel.add(index+p,data.get(p));
                    }
                    //listModel.removeElementAt(privateRegistryList.getSelectedIndex());
                    //displayDropLocation(dropValue + "on top of " + "\"" + value + "\"");
                }
                
                int size = privateRegistryList.getModel().getSize();
                
                if(lastSourceWasList) {
                    System.out.println("last source was list");
                    String dataString = null;
                    try {
                        //if we dragged within the jlist (changing the order of the items)
                        dataString = (String)t.getTransferData(DataFlavor.stringFlavor);
                    } catch (UnsupportedFlavorException ex) {
                       ex.printStackTrace();
                        Logger.getLogger(AutogeneFrame.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        ex.printStackTrace();
                        Logger.getLogger(AutogeneFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    if(dataString == null) {
                        System.err.println("ERROROROROROR");
                    }
                    
                    int comingFrom = privateRegistryList.getSelectedIndex();
                    
                    Log.addText("coming from " + comingFrom);
  
                        if(index == size-1) {
                            //if the drop location is the end

                            listModel.add(index, dataString);
                            listModel.removeElementAt(comingFrom);
                            System.out.println("index == size - 1");
                        } else {
                            //push all the data back
                            if(comingFrom == index) {
                                //if they drag and drop in the same spot, don't do anything
                                System.out.println("coming from == index");
                            } else {
                                Log.addText("removing element at " + comingFrom);
                                listModel.removeElementAt(comingFrom);
                                Log.addText("inserting " + dataString + " at " + index);
                                if(comingFrom < index)
                                    index--;
                            
                                listModel.add(index, dataString);
                            
                            }
                        }
                        
                    
                }
                else {
                    System.out.println("last source was not list");
                    if (insert) {
                        for(int p = 0; p < data.size(); p++) {
                            listModel.add(index+p,data.get(p));
                        }
                    } else {
                        listModel.set(index, data.get(0));
                        for(int p = 1; p < data.size(); p++) {
                            listModel.add(index+p,data.get(p));
                        }
                    }
                }

                
                lastSourceWasList = false;

                // Perform the actual import.  
                //int index = 
                
                return true;
		
		//return false;
            }
            
            @Override
            public int getSourceActions(JComponent c) {
                lastSourceWasList = true;
                return TransferHandler.MOVE;
                //System.out.println("GET SOURCE ACTIONS!!!" + c);
                //return this.COPY;
            }
            
            @Override
            protected Transferable createTransferable(JComponent c) {
                System.out.println("CREATE TRANSFERABLE! ");
                System.out.println(c);
                JList list = (JList)c;
                Object[] values = list.getSelectedValues();
        
                StringBuilder buff = new StringBuilder();

                for (int i = 0; i < values.length; i++) {
                    Object val = values[i];
                    buff.append(val == null ? "" : val.toString());
                    if (i != values.length - 1) {
                        buff.append("\n");
                    }
                }
                System.out.println("returning " + new StringSelection(buff.toString()));
                return new StringSelection(buff.toString());
            }
        });
        //privateRegistryList.setDropMode(DropMode.);
        privateRegistryList.setDropMode(DropMode.ON_OR_INSERT);
        privateRegistryList.addMouseListener(new PrivateRegistryListMouseListener(this));
    }

    public void addToPrivateRegistry(Object name) {
        ((DefaultListModel)privateRegistryList.getModel()).add(privateRegistryList.getModel().getSize(), name + " (" + AutogeneFrame.sourcePlasmidOfDrag + ")");
    }

    
    private class PlasmidListModel extends AbstractListModel {

        ArrayList<Plasmid> plasmids;
        public PlasmidListModel() {
            plasmids = Environment.getWorkspacePlasmids();
            for(int i = 0; i < plasmids.size(); i++) {
                System.out.println("PLASMID LIST MODEL: " + plasmids.get(i).getName());
            }
        }

        @Override
        public int getSize() {
            return plasmids.size();
        }

        @Override
        public Object getElementAt(int i) {
            return plasmids.get(i).getName();
        }
    }
    
    
    class MyCellRenderer extends DefaultListCellRenderer {
        
        ArrayList<Plasmid> plasmids;
        public MyCellRenderer() {
            plasmids = Environment.getWorkspacePlasmids();
        }
        
        /* This is the only method defined by ListCellRenderer.  We just
        * reconfigure the Jlabel each time we're called.
        */
        @Override
        public Component getListCellRendererComponent(
            JList list,
            Object value,   // value to display
            int index,      // cell index
            boolean iss,    // is the cell selected
            boolean chf)    // the list and the cell have the focus
        {
            /* The DefaultListCellRenderer class will take care of
             * the JLabels text property, it's foreground and background
             * colors, and so on.
             */
            super.getListCellRendererComponent(list, value, index, iss, chf);

            /* We additionally set the JLabels icon property here.
             */
            Plasmid p = plasmids.get(index);
            if(!p.hasBegunAnnotating()) {
                setIcon(plasmidNotReady);
            }
            else if(p.isAnnotating())
                setIcon(plasmidAnnotating);
            else
                setIcon(plasmidReady);

            return this;
        }
    }

    
}
