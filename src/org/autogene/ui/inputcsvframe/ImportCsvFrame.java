/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.autogene.ui.inputcsvframe;

import java.io.File;
import java.io.IOException;
import org.autogene.ui.frames.BaseInternalFrame;
import org.autogene.ui.main.AutogeneFrame;

/**
 *
 * @author georgechen
 */
public class ImportCsvFrame extends BaseInternalFrame {

    /**
     * Creates new form ImportCsvFrame
     */
    private boolean removeFirstColumn = false;
    private File selectedFile;
    private AutogeneFrame af;
    public ImportCsvFrame(AutogeneFrame ag) {
        af = ag;
        initComponents();
    }
    
    public boolean getRemoveFirstCol() {
        return removeFirstColumn;
    }
    
    public void setSelectedFile(File f) {
        selectedFile = f;
        jTextField1.setText(f.getAbsolutePath());
    }
    public File getFile() {
        return selectedFile;
    }
    
    private boolean ensureFileExists() {
        if(selectedFile == null) {
            return false;
        }
        return true;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        select = new javax.swing.JButton();
        addFeature = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        checkBox = new javax.swing.JCheckBox();
        asteriskDescription = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        optionsList = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();

        setTitle("Import csv\n");

        select.setText("Select..");
        select.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectActionPerformed(evt);
            }
        });

        addFeature.setText("Add Features");
        addFeature.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFeatureActionPerformed(evt);
            }
        });

        checkBox.setText("First Row is Titles");
        checkBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxActionPerformed(evt);
            }
        });

        asteriskDescription.setText("*columns should be feature name, sofa ID (not required), taxon ID (not required), and sequence");

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Add features to private registry");

        optionsList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Private Registry", "Oligos" }));
        optionsList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionsListActionPerformed(evt);
            }
        });

        jLabel1.setText("Add to:");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(24, 24, 24)
                .add(checkBox)
                .add(26, 26, 26)
                .add(jCheckBox1)
                .addContainerGap())
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(16, 16, 16)
                                .add(select)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .add(jLabel1)
                                .add(22, 22, 22)))
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(optionsList, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(0, 0, Short.MAX_VALUE))
                            .add(jTextField1)))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(addFeature)
                            .add(asteriskDescription))))
                .add(19, 19, 19))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, checkBox)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jCheckBox1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(select))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(optionsList, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel1))
                        .add(44, 44, 44))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                        .add(addFeature)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)))
                .add(asteriskDescription)
                .add(86, 86, 86))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void checkBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxActionPerformed
        // TODO add your handling code here:
        //Initiate whether or not the first row has just labels
        if(checkBox.isSelected()) {
            removeFirstColumn = true;
            System.out.println("Clicked");
        }
        else {
            removeFirstColumn = false;
        }
    }//GEN-LAST:event_checkBoxActionPerformed

    private void selectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectActionPerformed
        // TODO add your handling code here:
        //begin browsing, csv files only
        OpenFileChooser openFileChooser = new OpenFileChooser(this);
        openFileChooser.setEnvironment(environment);
        openFileChooser.show();
        
    }//GEN-LAST:event_selectActionPerformed

    private void addFeatureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFeatureActionPerformed
        // TODO add your handling code here:
        if(ensureFileExists()) {
            LoadCsvFrame loadCsvFrame = new LoadCsvFrame(this, af);
            try {
                loadCsvFrame.getTheData();
                System.out.println("Processed!");
            }
            catch(IOException e) {
                System.out.println("IOException Occurred");
            }
        }
    }//GEN-LAST:event_addFeatureActionPerformed

    private void optionsListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionsListActionPerformed
        // TODO add your handling code here:
        String input = (String)optionsList.getSelectedItem();
        if(input.equals("Private Registry")) {
            asteriskDescription.setText("*columns should be: feature name, sofa ID (not required), taxon ID (not required), and sequence");
            
        }
        else if (input.equals("Oligos")) {
            asteriskDescription.setText("*columns should be: oligo Description, sequence");
        }
    }//GEN-LAST:event_optionsListActionPerformed

   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addFeature;
    private javax.swing.JLabel asteriskDescription;
    private javax.swing.JCheckBox checkBox;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JComboBox optionsList;
    private javax.swing.JButton select;
    // End of variables declaration//GEN-END:variables
}
