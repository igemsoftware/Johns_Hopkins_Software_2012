/*
 * TESTING COMMITs
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.autogene.ui.inputframe;

import java.awt.Color;
import java.io.File;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JRadioButton;
import javax.swing.JSlider;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.autogene.algorithms.Annotator;
import org.autogene.algorithms.AnnotatorThread;
import org.autogene.core.bio.entities.Annotation;
import org.autogene.core.bio.entities.Plasmid;
import org.autogene.ui.cgview.LogEventType;
import org.autogene.ui.frames.BaseInternalFrame;
import org.autogene.ui.loggerframe.Log;
import org.autogene.ui.main.AutogeneFrame;
import org.biojava3.core.sequence.DNASequence;
import org.biojava3.core.sequence.io.FastaReaderHelper;

/**
 * This class provides a frame to allow the user to input plasmid data including
 * the name, the vendor, and a file with the sequence.
 * 
 * @author Robert
 */
public class ImportPlasmidFrame extends BaseInternalFrame implements DocumentListener {
    private File selectedFile = null;
    private String plasmidSequence;
    private final int frameWidth, frameHeight;
    private int IMPORT_FASTA_TAB_INDEX = 0, COPY_SEQUENCE_TAB_INDEX = 1;
    private AutogeneFrame autogeneFrame;


    
    /**
     * Creates new form ImportPlasmidFrame
     */
    
    public ImportPlasmidFrame(AutogeneFrame af) {
        autogeneFrame = af;
        initComponents();
        
        //size isn't being set properly. for some reason the height is wrong
        //hardcode here:
        //TODO: ask giovanni why the "design" won't let us make it smaller
        setSize(getWidth(), getHeight() - 200);
        frameWidth = getWidth();
        frameHeight = getHeight();
        
        jTextArea1.getDocument().addDocumentListener(this);
        
        jPanel3.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        nameTextField = new javax.swing.JTextField();
        nameLabel = new javax.swing.JLabel();
        vendorLabel = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        titleLabel = new javax.swing.JLabel();
        imortButton = new javax.swing.JButton();
        importFastaTab = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        uploadFileLabel = new javax.swing.JLabel();
        uploadButton = new javax.swing.JButton();
        dataFileTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        vendorLabel1 = new javax.swing.JLabel();
        matchingThreshold = new javax.swing.JSlider();
        dna = new javax.swing.JRadioButton();
        aminoAcid = new javax.swing.JRadioButton();
        vendorLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        nameLabel1 = new javax.swing.JLabel();
        perfect = new javax.swing.JRadioButton();
        imperfect = new javax.swing.JRadioButton();
        vendorLabel3 = new javax.swing.JLabel();
        tableJPanel1 = new org.autogene.ui.inputframe.TableJPanel();
        vendorLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Import Plasmid");

        nameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameTextFieldActionPerformed(evt);
            }
        });
        nameTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                nameTextFieldFocusGained(evt);
            }
        });

        nameLabel.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        nameLabel.setLabelFor(nameTextField);
        nameLabel.setText("Name:");

        vendorLabel.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        vendorLabel.setText("Vendor:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        titleLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Import Plasmid");

        imortButton.setText("Import ");
        imortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imortButtonActionPerformed(evt);
            }
        });

        uploadFileLabel.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        uploadFileLabel.setText("Data File:");

        uploadButton.setText("Select...");
        uploadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadButtonActionPerformed(evt);
            }
        });

        dataFileTextField.setEditable(false);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel1.setText("*Allowable file extensions: fasta");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(uploadFileLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(uploadButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 81, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(dataFileTextField))
            .add(jPanel1Layout.createSequentialGroup()
                .add(75, 75, 75)
                .add(jLabel1)
                .add(0, 213, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(38, 38, 38)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(uploadFileLabel)
                    .add(uploadButton)
                    .add(dataFileTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(5, 5, 5)
                .add(jLabel1)
                .addContainerGap(73, Short.MAX_VALUE))
        );

        importFastaTab.addTab("Import Fasta", jPanel1);

        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextArea1FocusGained(evt);
            }
        });
        jScrollPane1.setViewportView(jTextArea1);

        jLabel2.setText("Copy and paste the plasmid sequence below:");

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel2)
                .addContainerGap(210, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                .add(0, 29, Short.MAX_VALUE)
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 104, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        importFastaTab.addTab("Copy Sequence", jPanel2);

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        vendorLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        vendorLabel1.setText("Threshold:");

        matchingThreshold.setValue(98);
        matchingThreshold.setName("Matching Threshold");
        matchingThreshold.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                matchingThresholdStateChanged(evt);
            }
        });

        buttonGroup2.add(dna);
        dna.setSelected(true);
        dna.setText("DNA");

        buttonGroup2.add(aminoAcid);
        aminoAcid.setText("Amino Acid");

        vendorLabel4.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        vendorLabel4.setText("Alignment Type:");

        jTextField1.setText("98");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        nameLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        nameLabel1.setLabelFor(nameTextField);
        nameLabel1.setText("%");

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(vendorLabel4)
                        .add(18, 18, 18)
                        .add(dna)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(aminoAcid)
                        .add(0, 0, Short.MAX_VALUE))
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(vendorLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(matchingThreshold, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(nameLabel1)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(vendorLabel4)
                    .add(dna)
                    .add(aminoAcid))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(nameLabel1))
                    .add(vendorLabel1)
                    .add(matchingThreshold, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );

        matchingThreshold.getAccessibleContext().setAccessibleName("Matching Threshold:");

        buttonGroup1.add(perfect);
        perfect.setSelected(true);
        perfect.setText("Perfect");
        perfect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                perfectActionPerformed(evt);
            }
        });

        buttonGroup1.add(imperfect);
        imperfect.setText("Imperfect");
        imperfect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imperfectActionPerformed(evt);
            }
        });

        vendorLabel3.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        vendorLabel3.setText("Matching:");

        vendorLabel5.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        vendorLabel5.setText("Features:");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(titleLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(importFastaTab, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 0, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(layout.createSequentialGroup()
                                .add(vendorLabel3)
                                .add(18, 18, 18)
                                .add(perfect)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(imperfect)
                                .add(0, 0, Short.MAX_VALUE))
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(nameLabel)
                                    .add(vendorLabel))
                                .add(27, 27, 27)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jComboBox1, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(nameTextField)))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(0, 0, Short.MAX_VALUE)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                        .add(vendorLabel5)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                        .add(tableJPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 390, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, imortButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 84, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(titleLabel)
                .add(11, 11, 11)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(nameTextField)
                    .add(nameLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(vendorLabel)
                    .add(jComboBox1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(vendorLabel3)
                    .add(perfect)
                    .add(imperfect))
                .add(11, 11, 11)
                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(tableJPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 124, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(vendorLabel5))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(importFastaTab, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 181, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(imortButton)
                .add(191, 191, 191))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameTextFieldActionPerformed

    /**
     * Called when the user is ready to import the plasmid information.
     * @param evt action event
     */
    private void imortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imortButtonActionPerformed
        
        jTextArea1.setText(jTextArea1.getText().replaceAll("\\s",""));
        
        
        if(ensureNameFieldExists()) {
            Plasmid p = null;
            if(ensureFileExists()) {
                Log.addText("Importing plasmid: " + nameTextField.getText(), LogEventType.NEUTRAL);
                Log.addText("Finding plasmid complement...", LogEventType.NEUTRAL);
                setVisible(false);

                p = new Plasmid();
                p.setName(nameTextField.getText());
                p.setSupplier((String)jComboBox1.getSelectedItem());
                
                p.setSequence(plasmidSequence);
                
                environment.addPlasmidToWorkspace(p);

                p.initComplementSequence();

                //TODO:
                //plasmid is made
                //now call alignment algorithm
            }
            
            if(p==null && ensureCopyDNASequenceExists()) {
                Log.addText("Importing plasmid: " + nameTextField.getText(), LogEventType.NEUTRAL);
                Log.addText("Finding plasmid complement...", LogEventType.NEUTRAL);
                setVisible(false);
                
                p = new Plasmid();
                p.setName(nameTextField.getText());
                p.setSupplier((String)jComboBox1.getSelectedItem());
                p.setSequence(jTextArea1.getText());

                System.out.println(environment);
                environment.addPlasmidToWorkspace(p);
                
                p.initComplementSequence();
                
            }
            try {
                
                //AnnotatorThread at = new AnnotatorThread(p, autogeneFrame, this);
                
               
                
            } catch (Exception ex) {
                Logger.getLogger(ImportPlasmidFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
 
        }
        //if there is no name for the plasmid, output this on the Logger
        else {
            Log.addText("Please provide a plasmid name.", LogEventType.FAILURE);
        }
    }//GEN-LAST:event_imortButtonActionPerformed

    /**
     * Called when the user selects to upload a plasmid data file
     * @param evt action event
     */
    private void uploadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadButtonActionPerformed

        LoadInputFileFrame loadInputFileFrame = new LoadInputFileFrame(this);
        loadInputFileFrame.setEnvironment(environment);
        loadInputFileFrame.show();
    }//GEN-LAST:event_uploadButtonActionPerformed

    private void nameTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nameTextFieldFocusGained
       nameTextField.setBorder(BorderFactory.createLineBorder(Color.black));
    }//GEN-LAST:event_nameTextFieldFocusGained

    private void jTextArea1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextArea1FocusGained
        jTextArea1.setBorder(BorderFactory.createLineBorder(Color.black));
    }//GEN-LAST:event_jTextArea1FocusGained

    private void matchingThresholdStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_matchingThresholdStateChanged

        jTextField1.setText(matchingThreshold.getValue()+"");
    }//GEN-LAST:event_matchingThresholdStateChanged

    private void perfectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_perfectActionPerformed
        
        if(jPanel3.isVisible())
        {
            jPanel3.setVisible(false);
            setSize(getWidth(), getHeight() - 55);
        }
        
    }//GEN-LAST:event_perfectActionPerformed

    private void imperfectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imperfectActionPerformed
        
        if(!jPanel3.isVisible())
        {
            jPanel3.setVisible(true);
            setSize(getWidth(), getHeight() + 55);
        }
       
    }//GEN-LAST:event_imperfectActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        
        matchingThreshold.setValue(Integer.parseInt(jTextField1.getText()));
    }//GEN-LAST:event_jTextField1ActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton aminoAcid;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JTextField dataFileTextField;
    private javax.swing.JRadioButton dna;
    private javax.swing.JButton imortButton;
    private javax.swing.JRadioButton imperfect;
    private javax.swing.JTabbedPane importFastaTab;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JSlider matchingThreshold;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JLabel nameLabel1;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JRadioButton perfect;
    private org.autogene.ui.inputframe.TableJPanel tableJPanel1;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JButton uploadButton;
    private javax.swing.JLabel uploadFileLabel;
    private javax.swing.JLabel vendorLabel;
    private javax.swing.JLabel vendorLabel1;
    private javax.swing.JLabel vendorLabel3;
    private javax.swing.JLabel vendorLabel4;
    private javax.swing.JLabel vendorLabel5;
    // End of variables declaration//GEN-END:variables

    public void setSelectedFile(File f) {
        
        selectedFile = f;
        LinkedHashMap<String, DNASequence> a = null;
        
        try {
            a = FastaReaderHelper.readFastaDNASequence(selectedFile);
        } catch (Exception ex) {
            Logger.getLogger(LoadInputFileFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
 
        for(Map.Entry<String, DNASequence> entry : a.entrySet() ) {
            plasmidSequence = entry.getValue().getSequenceAsString();
        }
        
        //TODO: why doesn't this work?
        /*int length = dataFileTextField.getColumns();
        System.out.println(length);
        String display = absolutePath.substring(absolutePath.length()-length);
        dataFileTextField.setText(display);
        System.out.println("setting it with " + display);
        */
        
        dataFileTextField.setText(f.getName());
        dataFileTextField.setBorder(BorderFactory.createLineBorder(Color.black));
    }

    private boolean ensureFileExists() {
        
        //if the user has not selected a file
        if(selectedFile == null) {
            
            //if the "copy and paste sequence" text area is empty
            if(jTextArea1.getText().length() == 0) {
                
                //if we are viewing the import fasta tab
                if(importFastaTab.getSelectedIndex() == IMPORT_FASTA_TAB_INDEX) {
                    dataFileTextField.setBorder(BorderFactory.createLineBorder(Color.red));
                }
                else {
                    jTextArea1.setBorder(BorderFactory.createLineBorder(Color.red));
                }
            }
            
            return false;
        }
        
        return true;
    }

    private boolean ensureNameFieldExists() {
        //check name
        String name = nameTextField.getText();
        if(name == null || name.length() == 0) {
            //TODO: check for a whitespace name?
            
            nameTextField.setBorder(BorderFactory.createLineBorder(Color.red));
            return false;
        }
        
        return true;
    }

    private boolean ensureCopyDNASequenceExists() {
        if(jTextArea1.getText().length() == 0) {
            
            if(selectedFile == null) {
                
                if(importFastaTab.getSelectedIndex() == this.COPY_SEQUENCE_TAB_INDEX) {
                    jTextArea1.setBorder(BorderFactory.createLineBorder(Color.red));
                }
            }
            return false;
        }
        
        return true;
    }

    @Override
    public void insertUpdate(DocumentEvent de) {
        /*final String replace = jTextArea1.getText().replaceAll("\\s","");
        
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                jTextArea1.setText(replace);
            }
         });
          */
         
    }

    @Override
    public void removeUpdate(DocumentEvent de) {
        
    }

    @Override
    public void changedUpdate(DocumentEvent de) {
        
    }

    public JRadioButton getPerfect() {
        return perfect;
    }

    public JRadioButton getDna() {
        return dna;
    }

    public JSlider getMatchingThreshold() {
        return matchingThreshold;
    }
    
    public ArrayList<String> getTypes()
    {
        return tableJPanel1.getFeatureTypes();
        
    }
}
