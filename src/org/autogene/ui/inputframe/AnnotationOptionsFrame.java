/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.autogene.ui.inputframe;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.plaf.basic.BasicSliderUI;
import org.autogene.algorithms.AnnotatorThread;
import org.autogene.core.bio.entities.Plasmid;
import org.autogene.ui.frames.BaseInternalFrame;
import org.autogene.ui.main.AutogeneFrame;
import org.autogene.ui.sessions.Environment;

/**
 *
 * @author Robert
 */
public class AnnotationOptionsFrame extends BaseInternalFrame {

    private String plasmidName;
    private AutogeneFrame home;
    
    /**
     * Creates new form AnnotationOptionsFrame
     */
    public AnnotationOptionsFrame(AutogeneFrame h, String p) {
        initComponents();
        setTitle("Annotation Options for Plasmid \"" + p + "\"");
        plasmidName = p;
        home = h;
        imperfectPanel.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        imperfectPanel = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        dnaRadioButton = new javax.swing.JRadioButton();
        aminoAcidRadioButton = new javax.swing.JRadioButton();
        thresholdSlider = new javax.swing.JSlider();
        thresholdTextField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        featureCB = new javax.swing.JCheckBox();
        geneCB = new javax.swing.JCheckBox();
        promoterCB = new javax.swing.JCheckBox();
        primerCB = new javax.swing.JCheckBox();
        restrictionEnzymeCB = new javax.swing.JCheckBox();
        terminatorCB = new javax.swing.JCheckBox();
        regulatoryCB = new javax.swing.JCheckBox();
        originCB = new javax.swing.JCheckBox();
        annotateButton = new javax.swing.JButton();
        perfectRadioButton = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        imperfectRadioButton = new javax.swing.JRadioButton();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Annotation Options", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 18))); // NOI18N

        imperfectPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));

        jLabel6.setText("Alignment Type:");

        jLabel7.setText("Threshold:");

        dnaRadioButton.setSelected(true);
        dnaRadioButton.setText("DNA");
        dnaRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dnaRadioButtonActionPerformed(evt);
            }
        });

        aminoAcidRadioButton.setText("Amino Acid");
        aminoAcidRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aminoAcidRadioButtonActionPerformed(evt);
            }
        });

        thresholdSlider.setMaximum(10);
        thresholdSlider.setMinimum(1);
        thresholdSlider.setSnapToTicks(true);
        thresholdSlider.setValue(6);
        thresholdSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                thresholdSliderStateChanged(evt);
            }
        });

        thresholdTextField.setText("99.40");

        jLabel8.setText("%");

        org.jdesktop.layout.GroupLayout imperfectPanelLayout = new org.jdesktop.layout.GroupLayout(imperfectPanel);
        imperfectPanel.setLayout(imperfectPanelLayout);
        imperfectPanelLayout.setHorizontalGroup(
            imperfectPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(imperfectPanelLayout.createSequentialGroup()
                .add(imperfectPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(imperfectPanelLayout.createSequentialGroup()
                        .add(jLabel6)
                        .add(18, 18, 18)
                        .add(dnaRadioButton)
                        .add(18, 18, 18)
                        .add(aminoAcidRadioButton)
                        .add(87, 87, 87))
                    .add(imperfectPanelLayout.createSequentialGroup()
                        .add(jLabel7)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(thresholdSlider, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(thresholdTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 75, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)))
                .add(jLabel8)
                .addContainerGap(7, Short.MAX_VALUE))
        );
        imperfectPanelLayout.setVerticalGroup(
            imperfectPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, imperfectPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(imperfectPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel6)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, imperfectPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(dnaRadioButton)
                        .add(aminoAcidRadioButton)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(imperfectPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(thresholdTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(thresholdSlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .add(jLabel8)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, imperfectPanelLayout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(jLabel7)
                        .addContainerGap())))
        );

        jLabel2.setText("Features:");

        featureCB.setSelected(true);
        featureCB.setText("Other Features");

        geneCB.setSelected(true);
        geneCB.setText("Gene");

        promoterCB.setSelected(true);
        promoterCB.setText("Promoter");

        primerCB.setSelected(true);
        primerCB.setText("Primer");

        restrictionEnzymeCB.setSelected(true);
        restrictionEnzymeCB.setText("Restriction Enzyme");

        terminatorCB.setSelected(true);
        terminatorCB.setText("Terminator");

        regulatoryCB.setSelected(true);
        regulatoryCB.setText("Regulatory");

        originCB.setSelected(true);
        originCB.setText("Origin");

        annotateButton.setText("Annotate");
        annotateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                annotateButtonActionPerformed(evt);
            }
        });

        perfectRadioButton.setSelected(true);
        perfectRadioButton.setText("Perfect");
        perfectRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                perfectRadioButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Matching:");

        imperfectRadioButton.setText("Imperfect");
        imperfectRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imperfectRadioButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(imperfectPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(annotateButton))
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jLabel2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(primerCB)
                            .add(promoterCB)
                            .add(geneCB)
                            .add(featureCB))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(terminatorCB)
                            .add(regulatoryCB)
                            .add(originCB)
                            .add(restrictionEnzymeCB)))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(perfectRadioButton)
                        .add(18, 18, 18)
                        .add(imperfectRadioButton)))
                .add(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(9, 9, 9)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(perfectRadioButton)
                    .add(imperfectRadioButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(imperfectPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(9, 9, 9)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel2)
                            .add(featureCB))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(geneCB)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(promoterCB)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(primerCB))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(restrictionEnzymeCB)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(originCB)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(regulatoryCB)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(terminatorCB)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(annotateButton))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dnaRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dnaRadioButtonActionPerformed
        if(dnaRadioButton.isSelected()) {
            aminoAcidRadioButton.setSelected(false);
        } else {
            aminoAcidRadioButton.setSelected(true);
        }
    }//GEN-LAST:event_dnaRadioButtonActionPerformed

    private void aminoAcidRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aminoAcidRadioButtonActionPerformed
        if(aminoAcidRadioButton.isSelected()) {
            dnaRadioButton.setSelected(false);
        } else {
            dnaRadioButton.setSelected(true);
        }
    }//GEN-LAST:event_aminoAcidRadioButtonActionPerformed

    private void thresholdSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_thresholdSliderStateChanged
        int val = thresholdSlider.getValue();
        double[] list = new double[]{90,92,95,98,99,99.4,99.7,99.9,99.95,99.99};
        double vali = list[val-1];
        thresholdTextField.setText(new DecimalFormat("0.00").format(vali));
    }//GEN-LAST:event_thresholdSliderStateChanged

    //takes in a decimal between 0 and 1
    public double thresholdSliderFunction(double x) {
        return (Math.log(x*100)*3)+90;
    }
    
    private void annotateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_annotateButtonActionPerformed
        setVisible(false);
        Plasmid p = Environment.getWorkspacePlasmidByName(plasmidName);
        try {
            AnnotatorThread at = new AnnotatorThread(p, home,this);
        } catch (Exception ex) {
            Logger.getLogger(ImportPlasmidFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_annotateButtonActionPerformed

    private void imperfectRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imperfectRadioButtonActionPerformed
        if (imperfectRadioButton.isSelected()) {
            perfectRadioButton.setSelected(false);
            imperfectPanel.setVisible(true);
        } else {
            perfectRadioButton.setSelected(true);
            imperfectPanel.setVisible(false);
        }
    }//GEN-LAST:event_imperfectRadioButtonActionPerformed

    private void perfectRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_perfectRadioButtonActionPerformed
        if (perfectRadioButton.isSelected()) {
            imperfectRadioButton.setSelected(false);
            imperfectPanel.setVisible(false);

        } else {
            imperfectRadioButton.setSelected(true);
            imperfectPanel.setVisible(true);
        }
    }//GEN-LAST:event_perfectRadioButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton aminoAcidRadioButton;
    private javax.swing.JButton annotateButton;
    private javax.swing.JRadioButton dnaRadioButton;
    private javax.swing.JCheckBox featureCB;
    private javax.swing.JCheckBox geneCB;
    private javax.swing.JPanel imperfectPanel;
    private javax.swing.JRadioButton imperfectRadioButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JCheckBox originCB;
    private javax.swing.JRadioButton perfectRadioButton;
    private javax.swing.JCheckBox primerCB;
    private javax.swing.JCheckBox promoterCB;
    private javax.swing.JCheckBox regulatoryCB;
    private javax.swing.JCheckBox restrictionEnzymeCB;
    private javax.swing.JCheckBox terminatorCB;
    private javax.swing.JSlider thresholdSlider;
    private javax.swing.JTextField thresholdTextField;
    // End of variables declaration//GEN-END:variables

    public boolean perfectMatchingIsSelected() {
        return perfectRadioButton.isSelected();
    }

    public ArrayList<String> getTypes() {
        ArrayList<String> out = new ArrayList<String>();
        if(featureCB.isSelected()) {
            out.add("Feature");
        }
        if(geneCB.isSelected()) {
            out.add("Gene");
        }
        if(promoterCB.isSelected()) {
            out.add("Promoter");
        }
        if(primerCB.isSelected()) {
            out.add("Primer");
        }
        if(restrictionEnzymeCB.isSelected()) {
            out.add("Restriction Enzyme");
        }
        if(originCB.isSelected()) {
            out.add("Origin");
        }
        if(regulatoryCB.isSelected()) {
            out.add("Regulatory");
        }
        if(terminatorCB.isSelected()) {
            out.add("Terminator");
        }
        
        return out;
    }

    public boolean dnaIsSelected() {
        return dnaRadioButton.isSelected();
    }
    
    public double getMatchingThresholdValue() {
        return Double.parseDouble(this.thresholdTextField.getText());
    }
}
