/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.autogene.ui.inputframe;

import java.io.File;
import java.io.FileFilter;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.autogene.algorithms.AnnotatorThread;
import org.autogene.core.bio.entities.Plasmid;
import org.autogene.ui.cgview.LogEventType;
import org.autogene.ui.frames.BaseInternalFrame;
import org.autogene.ui.inputGenBankFrame.GenBankReader;
import org.autogene.ui.inputGenBankFrame.GenBankReaderForm;
import org.autogene.ui.inputSBOL.SBOLReader;
import org.autogene.ui.loggerframe.Log;
import org.autogene.ui.main.AutogeneFrame;
import org.autogene.ui.sessions.Environment;
import org.biojava3.core.sequence.DNASequence;
import org.biojava3.core.sequence.io.FastaReaderHelper;

/**
 *
 * @author Robert
 */
public class NewImportPlasmidFrame extends BaseInternalFrame {

    private AutogeneFrame autogeneFrame;
    private File file;
    
    /**
     * Creates new form NewImportPlasmidFrame
     */
    public NewImportPlasmidFrame(AutogeneFrame af) {
        autogeneFrame = af;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        vendorTextField = new javax.swing.JTextField();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        selectButton = new javax.swing.JButton();
        dataFileTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        importFileButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        sequencePane = new javax.swing.JTextPane();
        importSequenceButton = new javax.swing.JButton();
        zoomInButton = new javax.swing.JButton();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Import Plasmid", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 18))); // NOI18N

        jLabel1.setText("Name:");

        jLabel2.setText("Vendor:");

        jLabel3.setText("Data File:");

        selectButton.setText("Select...");
        selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectButtonActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel4.setText("*Allowable file extenstions: fasta, gb, xml");

        importFileButton.setText("Import");
        importFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importFileButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(selectButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 74, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(dataFileTextField)
                .addContainerGap())
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jLabel3)
                        .add(0, 0, Short.MAX_VALUE))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jLabel4)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 36, Short.MAX_VALUE)
                        .add(importFileButton))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(29, 29, 29)
                .add(jLabel3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(dataFileTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(selectButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jLabel4)
                        .addContainerGap())
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                        .add(0, 50, Short.MAX_VALUE)
                        .add(importFileButton))))
        );

        jTabbedPane1.addTab("Import File", jPanel2);

        jLabel5.setText("Copy and paste the plasmid sequence below:");

        jScrollPane1.setViewportView(sequencePane);

        importSequenceButton.setText("Import");
        importSequenceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importSequenceButtonActionPerformed(evt);
            }
        });

        zoomInButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/autogene/ui/resources/images/search.png"))); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jLabel5)
                .add(0, 50, Short.MAX_VALUE))
            .add(jScrollPane1)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                .add(zoomInButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(importSequenceButton))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jLabel5)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 108, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(importSequenceButton)
                    .add(zoomInButton)))
        );

        jTabbedPane1.addTab("Copy Sequence", jPanel3);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 354, Short.MAX_VALUE)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jLabel1)
                        .add(18, 18, 18)
                        .add(nameTextField))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jLabel2)
                        .add(10, 10, 10)
                        .add(vendorTextField)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(nameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(vendorTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jTabbedPane1))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void importSequenceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importSequenceButtonActionPerformed

        sequencePane.setText(sequencePane.getText().replaceAll("\\s",""));
        importPlasmid(sequencePane.getText());
      
    }//GEN-LAST:event_importSequenceButtonActionPerformed

    private void importFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importFileButtonActionPerformed
        if(file == null)
            return;
        
        if(file.getName().endsWith(".fasta")) {
            importFastaFile();
        } 
        else if(file.getName().endsWith(".xml")) {
            importSBOLFile();
        }
         else {
            importGenbankFile();
        }
        
    }//GEN-LAST:event_importFileButtonActionPerformed

    private void selectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectButtonActionPerformed
        file = promptToOpenFile();
        if(file == null) //if the user canceled the file chooser dialog
            return;
        
        dataFileTextField.setText(file.getName());

    }//GEN-LAST:event_selectButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField dataFileTextField;
    private javax.swing.JButton importFileButton;
    private javax.swing.JButton importSequenceButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JButton selectButton;
    private javax.swing.JTextPane sequencePane;
    private javax.swing.JTextField vendorTextField;
    private javax.swing.JButton zoomInButton;
    // End of variables declaration//GEN-END:variables

    private void importPlasmid(String dna) {
        String name = nameTextField.getText(), vendor = vendorTextField.getText();
        Log.addText("Importing plasmid: " + name, LogEventType.NEUTRAL);
        Log.addText("Finding plasmid complement...", LogEventType.NEUTRAL);
        if(Environment.getWorkspacePlasmidByName(name) != null) {
            JOptionPane.showMessageDialog(null, "Please rename this plasmid. Plasmid " + name + " already exists.");
            Log.addText("Import plasmid failed. Please rename and try again.", LogEventType.FAILURE);
            return;
        }        
        Plasmid p = new Plasmid();
        p.setName(name);
        p.setSupplier(vendor);
        p.setSequence(dna);
        
        importPlasmid(p);

    }
    
    private void importPlasmid(Plasmid p) {
        setVisible(false);
        if(plasmidHasProperDNA(p)) {
            environment.addPlasmidToWorkspace(p);     
            p.initComplementSequence();
        }
    }

    private File promptToOpenFile() {
        JFileChooser fc = new JFileChooser();
        ImportFastaOrGenbankFileFilter ifog = new ImportFastaOrGenbankFileFilter();
        
        fc.addChoosableFileFilter(ifog);
        int returnVal = fc.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            return file;
        }
        
        return null;
    }

    private void importFastaFile() {
        LinkedHashMap<String, DNASequence> a = null;
        
        try {
            a = FastaReaderHelper.readFastaDNASequence(file);
        } catch (Exception ex) {
            Logger.getLogger(LoadInputFileFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
 
        String plasmidSequence = "";
        for(Map.Entry<String, DNASequence> entry : a.entrySet() ) {
            plasmidSequence = entry.getValue().getSequenceAsString();
        }
        
        importPlasmid(plasmidSequence);
    }

    private void importGenbankFile() {

        GenBankReader gbr = new GenBankReader();
            try {
            Plasmid plasmid = gbr.read(file);
                if(gbr.alreadyHasAnnotations) {
                    plasmid.setHasBegunAnnotating();
                    plasmid.setIsAnnotating(false);
                }
                if(plasmid.getSequence() != null) {
                    //this does output a plasmid.
                    if(this.nameTextField.getText() != null && this.nameTextField.getText().length() > 0)
                        plasmid.setName(nameTextField.getText());
            
                    environment.addPlasmidToWorkspace(plasmid);
                    Log.addText("Imported " + plasmid.getName() + " successfully", LogEventType.SUCCESS);
                }
                else {
                    Log.addText("Failed to Import .gb File. Please Check Format", LogEventType.FAILURE);
                }
            }
            catch(Exception e) {
                Log.addText("Failed to Import .gb File. Please Check Format", LogEventType.FAILURE);
            }  
            
            this.setVisible(false);

    }
    private void importSBOLFile() {
        SBOLReader sbr = new SBOLReader();
        try {
            Plasmid plasmid = sbr.read(file);
            if(sbr.alreadyHasAnnotations) {
                plasmid.setHasBegunAnnotating();
                plasmid.setIsAnnotating(false);
            }
            if(plasmid.getSequence() != null) {
                //this does output a plasmid.
                if(this.nameTextField.getText() != null && this.nameTextField.getText().length() > 0)
                    plasmid.setName(nameTextField.getText());
            
                environment.addPlasmidToWorkspace(plasmid);
                Log.addText("Imported " + plasmid.getName() + " successfully", LogEventType.SUCCESS);
            }
            else {
               Log.addText("Failed to Import .xml File. Please Check Format", LogEventType.FAILURE); 
            }
        }
        catch(Exception e) {
            Log.addText("Failed to Import .xml File. Please Check Format", LogEventType.FAILURE);
            e.printStackTrace();
        }
        
    }
    
    private boolean plasmidHasProperDNA(Plasmid p) {
        String dna = p.getSequence();
        dna = dna.toLowerCase();
        String temp = dna;
        temp = temp.replaceAll("a","");
        temp = temp.replaceAll("t","");
        temp = temp.replaceAll("c","");
        temp = temp.replaceAll("g","");
        if(temp.length() > 0) {
            
            ArrayList<String> unique = new ArrayList<String>();
            for(int i = 0; i < temp.length(); i++) {
                String s = temp.charAt(i)+"";
                if(!unique.contains(s))
                    unique.add(s);
            }
            
            String out = unique.toString();
            out = out.substring(1);
            out = out.substring(0,out.length()-1);
            Log.addText("***Failed to import DNA. Found incorrect character(s): " + out, LogEventType.FAILURE);
            return false;
        }
        
        p.setSequence(dna);
        return true;
    }


}
