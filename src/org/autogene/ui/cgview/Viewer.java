/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.autogene.ui.cgview;

import java.awt.Color;
import java.awt.ComponentOrientation;
import java.awt.Dimension;
import java.beans.PropertyVetoException;
import java.text.DecimalFormat;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableModel;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;
import javax.swing.text.Highlighter.HighlightPainter;
import org.autogene.cgview.Feature;
import org.autogene.cgview.FeatureRange;
import org.autogene.cgview.HighlightedObject;
import org.autogene.core.bio.entities.Annotation;
import org.autogene.core.bio.entities.FeatureType;
import org.autogene.core.bio.entities.Plasmid;
import org.autogene.ui.frames.BaseInternalFrame;
import org.autogene.ui.loggerframe.Log;
import org.autogene.ui.main.AutogeneFrame;
import org.autogene.ui.sessions.Environment;

/**
 *
 * @author Robert
 */
public class Viewer extends BaseInternalFrame implements DocumentListener, TableModelListener, ListSelectionListener {
    private final PlasmidPanel plasmidPanel;
    private final Plasmid plasmid;
    private ArrayList<HighlightedObject> highlightedRanges;
    private ArrayList<HighlightedObject> originalHighlightedRanges;
    private AutogeneFrame home;

    
    public AutogeneFrame getHome() {
        return home;
    }
    /**
     * Creates a Viewer object.
     */
    public Viewer(Plasmid p, AutogeneFrame af) {
        initComponents();
        //table.setName(p.getName());
        home = af;
        plasmid = p;
        List<Annotation> annotations = plasmid.getAnnotations();
            for(int i = 0; i < annotations.size(); i++) {
                //Log.addText("for loop: " + annotations.get(i));
                //Log.addText("MyTableModelConstructor: " + annotations.get(i).getFeature() + " " + annotations.get(i).getStart() + " " + annotations.get(i).getFeature().getDisplayName());
                System.out.println("Viewer constructor Viewer.java " + annotations.get(i).getFeature().getDisplayName());
            }
        initTable();        
        
        int height = 400, width = 400;
        
        topPanel.setSize(width,height);
        plasmidPanel = new PlasmidPanel(plasmid,topPanel,this);
        topPanel.add(plasmidPanel);
        
        textPane.setText(plasmid.getSequence());
        textPane.getDocument().addDocumentListener(this);
        
        initHighlightedRanges();
        drawHighlightedRanges();  
        
        setTitle(p.getName());
        mainSplitPane.setDividerLocation((getWidth()/2)-100);
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        totalPanel = new javax.swing.JPanel();
        mainSplitPane = new javax.swing.JSplitPane();
        topPanel = new javax.swing.JPanel();
        plasmidViewPanel = new javax.swing.JPanel();
        plasmidSequenceSplitPane = new javax.swing.JSplitPane();
        dnaPanel = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        viewOligoMatchesButton = new javax.swing.JButton();
        filler10 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 32767));
        jButton1 = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 32767));
        addCustomAnnotationButton = new javax.swing.JButton();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 32767));
        addCustomAnnotationButton1 = new javax.swing.JButton();
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 32767));
        addCustomAnnotationButton2 = new javax.swing.JButton();
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 32767));
        addFeatureToPrivateRegistryButton = new javax.swing.JButton();
        filler9 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 32767));
        addFeatureToPrivateRegistryButton1 = new javax.swing.JButton();
        textPaneScrollPane = new javax.swing.JScrollPane();
        textPane = new javax.swing.JTextPane();
        lengthLabel = new javax.swing.JLabel();
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        CGLabel = new javax.swing.JLabel();
        filler6 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        startLabel = new javax.swing.JLabel();
        filler8 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        endLabel = new javax.swing.JLabel();
        filler7 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        tablePanel = new javax.swing.JPanel();
        tableScrollPane = new javax.swing.JScrollPane();
        table = new MyTable(this);

        mainSplitPane.setDividerLocation(350);
        mainSplitPane.setOneTouchExpandable(true);
        mainSplitPane.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
                mainSplitPaneAncestorMoved(evt);
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        topPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        org.jdesktop.layout.GroupLayout topPanelLayout = new org.jdesktop.layout.GroupLayout(topPanel);
        topPanel.setLayout(topPanelLayout);
        topPanelLayout.setHorizontalGroup(
            topPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 348, Short.MAX_VALUE)
        );
        topPanelLayout.setVerticalGroup(
            topPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 550, Short.MAX_VALUE)
        );

        mainSplitPane.setLeftComponent(topPanel);

        plasmidSequenceSplitPane.setDividerLocation(300);
        plasmidSequenceSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        plasmidSequenceSplitPane.setOneTouchExpandable(true);

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        viewOligoMatchesButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/autogene/ui/resources/images/qc.png"))); // NOI18N
        viewOligoMatchesButton.setToolTipText("Add the selected feature to the private registry.");
        viewOligoMatchesButton.setFocusable(false);
        viewOligoMatchesButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        viewOligoMatchesButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        viewOligoMatchesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewOligoMatchesButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(viewOligoMatchesButton);
        jToolBar1.add(filler10);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/autogene/ui/resources/images/find.png"))); // NOI18N
        jButton1.setToolTipText("View a segment of DNA.");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);
        jToolBar1.add(filler1);

        addCustomAnnotationButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/autogene/ui/resources/images/ws_add.png"))); // NOI18N
        addCustomAnnotationButton.setToolTipText("Annotate the selected DNA.");
        addCustomAnnotationButton.setFocusable(false);
        addCustomAnnotationButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addCustomAnnotationButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addCustomAnnotationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCustomAnnotationButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(addCustomAnnotationButton);
        jToolBar1.add(filler2);

        addCustomAnnotationButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/autogene/ui/resources/images/qc_pass.png"))); // NOI18N
        addCustomAnnotationButton1.setToolTipText("Show all features.");
        addCustomAnnotationButton1.setFocusable(false);
        addCustomAnnotationButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addCustomAnnotationButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addCustomAnnotationButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCustomAnnotationButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(addCustomAnnotationButton1);
        jToolBar1.add(filler3);

        addCustomAnnotationButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/autogene/ui/resources/images/qc_fail.png"))); // NOI18N
        addCustomAnnotationButton2.setToolTipText("Remove all features from the view.");
        addCustomAnnotationButton2.setFocusable(false);
        addCustomAnnotationButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addCustomAnnotationButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addCustomAnnotationButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCustomAnnotationButton2ActionPerformed(evt);
            }
        });
        jToolBar1.add(addCustomAnnotationButton2);
        jToolBar1.add(filler4);

        addFeatureToPrivateRegistryButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/autogene/ui/resources/images/load.png"))); // NOI18N
        addFeatureToPrivateRegistryButton.setToolTipText("Add the selected feature to the private registry.");
        addFeatureToPrivateRegistryButton.setFocusable(false);
        addFeatureToPrivateRegistryButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addFeatureToPrivateRegistryButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addFeatureToPrivateRegistryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFeatureToPrivateRegistryButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(addFeatureToPrivateRegistryButton);
        jToolBar1.add(filler9);

        addFeatureToPrivateRegistryButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/autogene/ui/resources/images/sequence.png"))); // NOI18N
        addFeatureToPrivateRegistryButton1.setToolTipText("Add the selected feature to the private registry.");
        addFeatureToPrivateRegistryButton1.setFocusable(false);
        addFeatureToPrivateRegistryButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addFeatureToPrivateRegistryButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addFeatureToPrivateRegistryButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFeatureToPrivateRegistryButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(addFeatureToPrivateRegistryButton1);

        textPane.setEditable(false);
        textPane.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        textPane.setDragEnabled(false);
        textPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                textPaneMouseReleased(evt);
            }
        });
        textPane.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                textPaneCaretUpdate(evt);
            }
        });
        textPane.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                textPaneMouseDragged(evt);
            }
        });
        textPaneScrollPane.setViewportView(textPane);

        lengthLabel.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        lengthLabel.setText("Length:");

        CGLabel.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        CGLabel.setText("CG:");

        startLabel.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        startLabel.setText("Start:");

        endLabel.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        endLabel.setText("End:");

        org.jdesktop.layout.GroupLayout dnaPanelLayout = new org.jdesktop.layout.GroupLayout(dnaPanel);
        dnaPanel.setLayout(dnaPanelLayout);
        dnaPanelLayout.setHorizontalGroup(
            dnaPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jToolBar1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(dnaPanelLayout.createSequentialGroup()
                .add(lengthLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 95, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(filler5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 21, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(startLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 81, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(filler8, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 21, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(endLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 77, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(filler6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(CGLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 90, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(filler7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE))
            .add(textPaneScrollPane)
        );
        dnaPanelLayout.setVerticalGroup(
            dnaPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(dnaPanelLayout.createSequentialGroup()
                .add(jToolBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(textPaneScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(dnaPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(lengthLabel)
                    .add(dnaPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, startLabel)
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, endLabel)
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, filler5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, filler7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, CGLabel)
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, filler6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, filler8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        plasmidSequenceSplitPane.setTopComponent(dnaPanel);

        tablePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Features"));

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        table.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        table.setDragEnabled(true);
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        tableScrollPane.setViewportView(table);

        org.jdesktop.layout.GroupLayout tablePanelLayout = new org.jdesktop.layout.GroupLayout(tablePanel);
        tablePanel.setLayout(tablePanelLayout);
        tablePanelLayout.setHorizontalGroup(
            tablePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(tableScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 461, Short.MAX_VALUE)
        );
        tablePanelLayout.setVerticalGroup(
            tablePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, tableScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
        );

        plasmidSequenceSplitPane.setRightComponent(tablePanel);

        org.jdesktop.layout.GroupLayout plasmidViewPanelLayout = new org.jdesktop.layout.GroupLayout(plasmidViewPanel);
        plasmidViewPanel.setLayout(plasmidViewPanelLayout);
        plasmidViewPanelLayout.setHorizontalGroup(
            plasmidViewPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, plasmidSequenceSplitPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 477, Short.MAX_VALUE)
        );
        plasmidViewPanelLayout.setVerticalGroup(
            plasmidViewPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(plasmidSequenceSplitPane)
        );

        mainSplitPane.setRightComponent(plasmidViewPanel);

        org.jdesktop.layout.GroupLayout totalPanelLayout = new org.jdesktop.layout.GroupLayout(totalPanel);
        totalPanel.setLayout(totalPanelLayout);
        totalPanelLayout.setHorizontalGroup(
            totalPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, totalPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(mainSplitPane)
                .addContainerGap())
        );
        totalPanelLayout.setVerticalGroup(
            totalPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainSplitPane)
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(totalPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(totalPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mainSplitPaneAncestorMoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_mainSplitPaneAncestorMoved
        //System.out.println("moved");
    }//GEN-LAST:event_mainSplitPaneAncestorMoved

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        plasmidPanel.getCGView().removeFeatureWithName("SELECTED");
        plasmidPanel.getCGView().addGreenFeatureWithName("SELECTED",textPane.getSelectionStart(),textPane.getSelectionEnd());
        plasmidPanel.repaint();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void textPaneCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_textPaneCaretUpdate
        plasmidPanel.getCGView().removeFeatureWithName("SELECTED");
        if(textPane.getSelectedText() == null) {
            this.addCustomAnnotationButton.setEnabled(false);
        }
        
    }//GEN-LAST:event_textPaneCaretUpdate

    private void addCustomAnnotationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCustomAnnotationButtonActionPerformed
        CustomAnnotationDialog dialog = new CustomAnnotationDialog(new javax.swing.JFrame(), true, textPane.getSelectionStart(), textPane.getSelectionEnd(), textPane.getSelectedText(),this);
        dialog.setVisible(true);
    }//GEN-LAST:event_addCustomAnnotationButtonActionPerformed

    private void textPaneMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textPaneMouseDragged
        addCustomAnnotationButton.setEnabled(true);
    }//GEN-LAST:event_textPaneMouseDragged

    private int previous = -1;
    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        home.setLastSourceWasList(false);

        if(evt.getClickCount() == 2) {
            Annotation a = plasmid.getAnnotations().get(table.getSelectedRow());
            System.out.println(plasmid.getAnnotations());
            ReportViewer rp = new ReportViewer(a);
            rp.setEnvironment(this.getEnvironment());
            home.getDesktopPane().add(rp);
            rp.show();
        
            System.out.println("made report viewer");
            plasmidPanel.repaint();
            return;
        }
        
        //if something was highlighted before
        if(previous != -1) {
            boolean isSelected = highlightedRanges.get(previous).isSelectedOnThePlasmid;  
            
            if(isSelected)
                plasmidPanel.getCGView().colorFeatureWithName(plasmid.getAnnotations().get(previous).getFeature().getDisplayName(), ColorConstants.SELECTED_COLOR);
            else
                plasmidPanel.getCGView().colorFeatureWithName(plasmid.getAnnotations().get(previous).getFeature().getDisplayName(), ColorConstants.getNeutralColorForAnnotation(plasmid.getAnnotations().get(previous)));
        }
        
        //if we clicked the same row, we should unselect it
        if(previous != -1 && previous == table.getSelectedRow()) {
            if((Boolean)table.getModel().getValueAt(table.getSelectedRow(), 0)) {
                boolean isSelected = highlightedRanges.get(table.getSelectedRow()).isSelectedOnThePlasmid;  
                if(isSelected)
                    plasmidPanel.getCGView().colorFeatureWithName(plasmid.getAnnotations().get(table.getSelectedRow()).getFeature().getDisplayName(), ColorConstants.SELECTED_COLOR);
                else  {
                    plasmidPanel.getCGView().colorFeatureWithName(plasmid.getAnnotations().get(table.getSelectedRow()).getFeature().getDisplayName(), ColorConstants.getNeutralColorForAnnotation(plasmid.getAnnotations().get(table.getSelectedRow())));
                }
            }
            addFeatureToPrivateRegistryButton.setEnabled(false);
            table.clearSelection();
        } else {
            if((Boolean)table.getModel().getValueAt(table.getSelectedRow(), 0)) {
                
                //should we color this orange or red? we must determine if this is a selected feature already
                boolean isSelected = highlightedRanges.get(table.getSelectedRow()).isSelectedOnThePlasmid;
                if(isSelected)
                    plasmidPanel.getCGView().colorFeatureWithName(plasmid.getAnnotations().get(table.getSelectedRow()).getFeature().getDisplayName(), ColorConstants.SELECTED_COLOR);
                else {
                    plasmidPanel.getCGView().colorFeatureWithName(plasmid.getAnnotations().get(table.getSelectedRow()).getFeature().getDisplayName(), ColorConstants.ROW_SELECTED_COLOR);
                    addFeatureToPrivateRegistryButton.setEnabled(true);
                }
                //if(previous != -1 && (Boolean)table.getModel().getValueAt(previous,0))
                //    plasmidPanel.getCGView().colorFeatureWithName(plasmid.getAnnotations().get(previous).getFeature().getDisplayName(), Color.blue);
                //plasmidPanel.repaint();
            }
        }
            
       previous = table.getSelectedRow();
       plasmidPanel.repaint();
    }//GEN-LAST:event_tableMouseClicked

    private void addCustomAnnotationButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCustomAnnotationButton1ActionPerformed
        ((MyTableModel)table.getModel()).setAllVisible(true);

    }//GEN-LAST:event_addCustomAnnotationButton1ActionPerformed

    private void addCustomAnnotationButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCustomAnnotationButton2ActionPerformed
        ((MyTableModel)table.getModel()).setAllVisible(false);
    }//GEN-LAST:event_addCustomAnnotationButton2ActionPerformed

    private void addFeatureToPrivateRegistryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFeatureToPrivateRegistryButtonActionPerformed
        AutogeneFrame.setSourcePlasmidOfDrag(plasmid.getName());
        int[] rows = table.getSelectedRows();
        for(int i = 0; i < rows.length; i++) {
            home.addToPrivateRegistry(table.getModel().getValueAt(rows[i], 1));
        }
    }//GEN-LAST:event_addFeatureToPrivateRegistryButtonActionPerformed

    private void textPaneMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textPaneMouseReleased
        this.updateSelectedDNALabels();
        plasmidPanel.repaint();
    }//GEN-LAST:event_textPaneMouseReleased

    private void addFeatureToPrivateRegistryButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFeatureToPrivateRegistryButton1ActionPerformed
        
        ProteinViewer rp = new ProteinViewer(textPane.getText());
            rp.setEnvironment(this.getEnvironment());
            home.getDesktopPane().add(rp);
            rp.show();
        
    }//GEN-LAST:event_addFeatureToPrivateRegistryButton1ActionPerformed

    private void viewOligoMatchesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewOligoMatchesButtonActionPerformed
        ViewOligoMatches rp = new ViewOligoMatches(environment.getActivePlasmid());
            rp.setEnvironment(this.getEnvironment());
            home.getDesktopPane().add(rp);
            rp.show();
    }//GEN-LAST:event_viewOligoMatchesButtonActionPerformed

    
    //the current piece of DNA we have highlighted by clicking on the plasmid
    private HighlightedObject previousHighlightedDNA;
    
    void highlightDNA(FeatureRange fr) {
        
        textPane.getHighlighter().removeAllHighlights();
        for(int i = 0; i < highlightedRanges.size(); i++) {
            HighlightedObject ho = highlightedRanges.get(i);
            
            HighlightedObject prev = previousHighlightedDNA;
            try {
                if(ho.getStart() == fr.getStart() && ho.getStop() == fr.getStop()) {
                    if(ho.isSelectedOnThePlasmid) {
                        textPane.getHighlighter().addHighlight(ho.getStart(), ho.getStop(), new DefaultHighlighter.DefaultHighlightPainter(ho.getColor()));
                        ho.isSelectedOnThePlasmid = false;
                    } else {
                        textPane.getHighlighter().addHighlight(ho.getStart(), ho.getStop(), new BorderHighlighter.BorderHighlightPainter(Color.red));
                        ho.isSelectedOnThePlasmid = true;
                    }
                }
                else {
                    if(!ho.isSelectedOnThePlasmid)
                        textPane.getHighlighter().addHighlight(ho.getStart(), ho.getStop(), new DefaultHighlighter.DefaultHighlightPainter(ho.getColor()));
                    else
                        textPane.getHighlighter().addHighlight(ho.getStart(), ho.getStop(), new BorderHighlighter.BorderHighlightPainter(Color.red));
                }
            } catch(BadLocationException e) {
                e.printStackTrace();
            }
        }
        /*//see if this region is already highlighted
        boolean isHighlighted = false;
        for(int i = 0; i < highlightedRanges.size(); i++) {
            HighlightedObject o = highlightedRanges.get(i);
            
            if(o.equalsFeatureRange(fr)) {
                highlightedRanges.remove(i);
                HighlightedObject.decrementColorIndex();
                isHighlighted = true;
                break;
            }
        }
        
        if(!isHighlighted) {
            highlightedRanges.add(new HighlightedObject(fr));
        }
        
        //remove all the higlights
        textPane.getHighlighter().removeAllHighlights();
        
        //paint all the highlights
        for(int i = 0; i < highlightedRanges.size(); i++) {
            HighlightedObject f = highlightedRanges.get(i);
            try {
                int start = f.getStart(), stop = f.getStop();
            
                
                if(start == fr.getStart() && stop == fr.getStop())
                    textPane.getHighlighter().addHighlight(start, stop, new BorderHighlighter.BorderHighlightPainter(Color.red));
                else
                    textPane.getHighlighter().addHighlight(start, stop, this.getHighlightPainter(f.getColor()));

            } catch (BadLocationException ex) {
                Logger.getLogger(Viewer.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        * 
        */
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CGLabel;
    private javax.swing.JButton addCustomAnnotationButton;
    private javax.swing.JButton addCustomAnnotationButton1;
    private javax.swing.JButton addCustomAnnotationButton2;
    private javax.swing.JButton addFeatureToPrivateRegistryButton;
    private javax.swing.JButton addFeatureToPrivateRegistryButton1;
    private javax.swing.JPanel dnaPanel;
    private javax.swing.JLabel endLabel;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler10;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private javax.swing.Box.Filler filler5;
    private javax.swing.Box.Filler filler6;
    private javax.swing.Box.Filler filler7;
    private javax.swing.Box.Filler filler8;
    private javax.swing.Box.Filler filler9;
    private javax.swing.JButton jButton1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel lengthLabel;
    private javax.swing.JSplitPane mainSplitPane;
    private javax.swing.JSplitPane plasmidSequenceSplitPane;
    private javax.swing.JPanel plasmidViewPanel;
    private javax.swing.JLabel startLabel;
    private javax.swing.JTable table;
    private javax.swing.JPanel tablePanel;
    private javax.swing.JScrollPane tableScrollPane;
    private javax.swing.JTextPane textPane;
    private javax.swing.JScrollPane textPaneScrollPane;
    private javax.swing.JPanel topPanel;
    private javax.swing.JPanel totalPanel;
    private javax.swing.JButton viewOligoMatchesButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void insertUpdate(DocumentEvent de) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void removeUpdate(DocumentEvent de) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void changedUpdate(DocumentEvent de) {
        plasmidPanel.getCGView().removeFeatureWithName("SELECTED");
        plasmidPanel.getCGView().addGreenFeatureWithName("SELECTED",textPane.getSelectionStart(),textPane.getSelectionEnd());
        plasmidPanel.repaint();
    }

    JPanel getTopPanel() {
        return dnaPanel;
    }

    //gets the next color to use to highlight DNA sequence in the ruler
    private HighlightPainter getHighlightPainter(Color c) {
        return new DefaultHighlighter.DefaultHighlightPainter(c);

    }

    private void initHighlightedRanges() {
        highlightedRanges = new ArrayList<HighlightedObject>();
        originalHighlightedRanges = new ArrayList<HighlightedObject>();
        List<Annotation> annotations = plasmid.getAnnotations();
        sortAnnotationsByStartPosition(annotations);
        
        for(int i = 0; i < annotations.size(); i++) {
            Annotation a = annotations.get(i);
          //  Log.addText("Start: " + a.getStart());
            int start = a.getStart(), end = a.getEnd();
            HighlightedObject ho = new HighlightedObject(start-1, end, a.getFeature().getDisplayName(), a.getColor());
            highlightedRanges.add(ho);
            originalHighlightedRanges.add(ho);
        }  
        
    }

    private void drawHighlightedRanges() {
        
        textPane.getHighlighter().removeAllHighlights();
        
        for(int i = 0; i < highlightedRanges.size(); i++) {
            HighlightedObject ho = highlightedRanges.get(i);
            try {
                if(ho.isSelectedOnThePlasmid) 
                    textPane.getHighlighter().addHighlight(ho.getStart(), ho.getStop(), new BorderHighlighter.BorderHighlightPainter(Color.red));
                else
                    textPane.getHighlighter().addHighlight(ho.getStart(), ho.getStop(), getHighlightPainter(ho.getColor()));
                //System.out.println("added highlighting at " + ho.getStart() + " " + ho.getStop() + " " + ho.getColor());
            } catch (BadLocationException ex) {
                ex.printStackTrace();
            }
        }
        
    }

    private void sortAnnotationsByStartPosition(List<Annotation> annotations) {
        Comparator<Annotation> aCom = new Comparator<Annotation>() {
            public int compare(Annotation a, Annotation b) {
                return a.getStart().compareTo(b.getStart());
            }
        };
        Collections.sort(annotations, aCom);
    }

    void addCurrentCustomAnnotation(String name) {
        int start = textPane.getSelectionStart(), end = textPane.getSelectionEnd();
        String dna = textPane.getSelectedText();
        
        org.autogene.core.bio.entities.Feature f = new org.autogene.core.bio.entities.Feature();
        f.setName(name);
        f.setDisplayName(name);
        f.setSequence(dna);
        f.setType(new FeatureType(FeatureType.CUSTOM_TYPE));
        
        //TODO: make sure a user does not have a custom annotation with the same name
        //as another feature. Use this hashmap:
        //HashMap<String, Integer> currentFeatures = plasmid.getFeatureDisplayNamesHashMap();
  
        List<Annotation> annotations = plasmid.getAnnotations();
        Annotation a = new Annotation();
        a.setFeature(f);
        a.setStart(start);
        a.setEnd(end);
        a.setPlasmid(plasmid);
        a.setScore(1.0); //TODO: score should be 1.0?
        
        //add the annotation
        annotations.add(a);
        
        //make a spot on the table for it
        ((MyTableModel)table.getModel()).getVisible().add(new Boolean(true));
        
        //add to original and current highlightedobject
        HighlightedObject ho = new HighlightedObject(start, end, name);
        this.originalHighlightedRanges.add(ho);
        this.highlightedRanges.add(new HighlightedObject(ho));
        
        //update highlights
        this.drawHighlightedRanges();
        
        
        //now draw it
        plasmidPanel.getCGView().addTurquoiseFeatureWithName(name, start, end);
        plasmidPanel.repaint();
        
        //update table
        table.revalidate();
    }

    private void initTable() {
        List<Annotation> annotations = plasmid.getAnnotations();
            for(int i = 0; i < annotations.size(); i++) {
                //Log.addText("for loop: " + annotations.get(i));
                //Log.addText("MyTableModelConstructor: " + annotations.get(i).getFeature() + " " + annotations.get(i).getStart() + " " + annotations.get(i).getFeature().getDisplayName());
                System.out.println("initTable Viewer.java " + annotations.get(i).getFeature().getDisplayName());
            }
        table.setModel(new MyTableModel());
        table.getModel().addTableModelListener(this);
        table.setSelectionBackground(Color.orange);
        table.getColumnModel().getColumn(0).setPreferredWidth(40);
        
    }

    
    @Override
    public void tableChanged(TableModelEvent e) {
        int row = e.getFirstRow();
        int column = e.getColumn();
        TableModel model = (TableModel)e.getSource();
        String columnName = model.getColumnName(column);
        Object data = model.getValueAt(row, column);
        
        //if the user selected a checkbox, we should update the cgview and highlighted ranges
        Boolean b = (Boolean)table.getModel().getValueAt(row, column);
        if(b) {
            plasmidPanel.getCGView().addBlueFeatureFromAnnotation(plasmid.getAnnotations().get(row));
            
            //add highlighted range
            //TODO: the rows get messed up. add the spot that it was originally
            //find where to add this highlight
            highlightedRanges.get(row).setColor(originalHighlightedRanges.get(row).getOriginalColor());
            this.drawHighlightedRanges();
            
        } else {
            plasmidPanel.getCGView().removeFeatureWithName(plasmid.getAnnotations().get(row).getFeature().getDisplayName());
            
            //remove highlighted range
            //also, update the highlighting
            System.out.println("highlighted ranges: " + highlightedRanges.size());
            //unhighlight
            highlightedRanges.get(row).setInvisible(); //ASSUMING THE HIGHLIGHTED RANGES LIST MATCHES THE TABLE
            printHighlightedRanges();
            this.drawHighlightedRanges();
        } 
    }
   
    

    @Override
    public void valueChanged(ListSelectionEvent e) {
        if (e.getSource() == table.getSelectionModel() && table.getRowSelectionAllowed()) {
            // Column selection changed
            int first = e.getFirstIndex();
            int last = e.getLastIndex();
        } else if (e.getSource() == table.getColumnModel().getSelectionModel() && table.getColumnSelectionAllowed() ){
            // Row selection changed
            int first = e.getFirstIndex();
            int last = e.getLastIndex();
        }
    }

    public JTable getTable() {
        return table;
    }

    private void printHighlightedRanges() {
       // Log.addText(highlightedRanges.toString());
    }

    Plasmid getPlasmid() {
        return plasmid;
    }

    public PlasmidPanel getPlasmidPanel() {
        return plasmidPanel;
    }

    private void updateSelectedDNALabels() {
        if(textPane.getSelectedText() == null || textPane.getSelectedText().equals(""))
            return;
        
        //add one because index starts at 0
        int start = textPane.getSelectionStart()+1, end = textPane.getSelectionEnd()+1;
        int length = end - start;
        
        String text = textPane.getSelectedText();
        int count = 0;
        for(int i = 0; i < text.length(); i++) {
            char c = text.charAt(i);
            if(c == 'C' || c == 'G')
                count++;
            
        }
        
        lengthLabel.setText("Length: " + length);
        startLabel.setText("Start: " + start);
        endLabel.setText("End: " + end);
        CGLabel.setText("CG: " + new DecimalFormat("#.##").format(((count*100.0)/text.length())) + "%");
        plasmidPanel.repaint();
    }
    
    
    class MyTableModel extends AbstractTableModel {
        private String[] columnNames = {"Visible", "Name", "Start", "End", "Score", "Type"};
       
        List<Annotation> annotations;
        ArrayList<Boolean> visible;
        
        public MyTableModel() {
            annotations = plasmid.getAnnotations();
            visible = new ArrayList<Boolean>();
            for(int i = 0; i < annotations.size(); i++) {
                //Log.addText("for loop: " + annotations.get(i));
                visible.add(new Boolean(true));
                //Log.addText("MyTableModelConstructor: " + annotations.get(i).getFeature() + " " + annotations.get(i).getStart() + " " + annotations.get(i).getFeature().getDisplayName());
                System.out.println("MyTableModel constructor " + annotations.get(i).getFeature().getDisplayName());
            }
            
        }
        
        public ArrayList<Boolean> getVisible() {
            return visible;
        }

        public int getColumnCount() {
            return columnNames.length;
        }  

        public int getRowCount() {
            return annotations.size();
        }

        public String getColumnName(int col) {
            return columnNames[col];
        }
        
        public boolean isFeatureVisible(String displayName) {
            for(int i = 0; i < annotations.size(); i++) {
                String n = annotations.get(i).getFeature().getDisplayName();
                if(n.equals(displayName)) {
                    return visible.get(i);
                }
            }
            return false;
        }

        public Object getValueAt(int row, int col) {
            Annotation a = annotations.get(row);
            
            if(col == 0) {
                return visible.get(row);
            } else if(col == 1) {
                return a.getFeature().getDisplayName();
            } else if(col == 2) {
                return (a.getStart()+"");
            } else if(col == 3) {
                return a.getEnd()+"";
            } else if(col == 4) {
                return new DecimalFormat("0.000").format(a.getScore())+"";
            } else {
                return a.getFeature().getType().getName();
            }
   
        }

        public Class getColumnClass(int c) {
            //Log.addText("getValueAt 0 and " + c);
            Object val = getValueAt(0,c);
            
            return val.getClass();
        }

        /*
        * Don't need to implement this method unless your table's
        * editable.
        */
        public boolean isCellEditable(int row, int col) {
            //Note that the data/cell address is constant,
            //no matter where the cell appears onscreen.
            
             if (col == 0) {
            return true;
        } else {
            return false;
        }
        
        
        }

        /*
        * Don't need to implement this method unless your table's
        *  data can change.
        */
        public void setValueAt(Object value, int row, int col) {
            if(col == 0) {
                visible.set(row, (Boolean)value);
            
                
            }
        
            fireTableCellUpdated(row, col);
        }

        public boolean isFeatureSelected(String label) {
            
           // Log.addText("checking if current selected label is " + label);
            if(table.getSelectedRow() == -1) {
                return false;
            } else if(((String)this.getValueAt(table.getSelectedRow(), 1)).equals(label)) {
             //   Log.addText("yes it does!");
                 return true;
            } else {
              //  Log.addText("no it doesn't");
                return false;
            }
        }

        private void setAllVisible(boolean b) {
            for(int i = 0; i < visible.size(); i++) {
                this.setValueAt(b, i, 0);
            }
        }
    }
    
}
    
