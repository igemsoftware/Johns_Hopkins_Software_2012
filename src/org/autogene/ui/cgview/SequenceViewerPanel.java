/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.autogene.ui.cgview;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import org.autogene.core.bio.entities.Plasmid;
import org.autogene.ui.sessions.Environment;

/**
 *
 * @author Robert
 */
public class SequenceViewerPanel extends javax.swing.JPanel {

    private Plasmid plasmid;
    private String A_COLOR = "red",
                   T_COLOR = "blue",
                   C_COLOR = "green",
                   G_COLOR = "black";
    
    /**
     * Creates new form SequenceViewerPanel
     */
    public SequenceViewerPanel(Plasmid p) {
        plasmid = p;
        initComponents();
        initSequenceLabels();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        scrollPanePanel = new javax.swing.JPanel();
        original = new javax.swing.JLabel();
        complement = new javax.swing.JLabel();
        basePairs = new javax.swing.JLabel();
        labels = new javax.swing.JLabel();

        original.setText("jLabel1");

        complement.setText("jLabel2");

        basePairs.setText("jLabel3");

        labels.setText("line");

        org.jdesktop.layout.GroupLayout scrollPanePanelLayout = new org.jdesktop.layout.GroupLayout(scrollPanePanel);
        scrollPanePanel.setLayout(scrollPanePanelLayout);
        scrollPanePanelLayout.setHorizontalGroup(
            scrollPanePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(original, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
            .add(complement, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(basePairs, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
            .add(scrollPanePanelLayout.createSequentialGroup()
                .add(labels)
                .add(0, 0, Short.MAX_VALUE))
        );
        scrollPanePanelLayout.setVerticalGroup(
            scrollPanePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(scrollPanePanelLayout.createSequentialGroup()
                .add(original, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(complement, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(9, 9, 9)
                .add(labels, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(basePairs)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        jScrollPane2.setViewportView(scrollPanePanel);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 367, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel basePairs;
    private javax.swing.JLabel complement;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labels;
    private javax.swing.JLabel original;
    private javax.swing.JPanel scrollPanePanel;
    // End of variables declaration//GEN-END:variables

    private void initSequenceLabels() {
        Font f = new Font("Monospaced", Font.PLAIN, 14);
        FontMetrics fm = this.getFontMetrics(f);
        String html = this.generateHTMLForSequence();
        
        int w = fm.stringWidth(html)+5;
        //w = 80000;
        int h = fm.getHeight();
        
        
        
        original.setFont(f);
        complement.setFont(f);
        basePairs.setFont(f);
                labels.setFont(f);

        
         scrollPanePanel.setMaximumSize(new Dimension(w,scrollPanePanel.getHeight()));
                 scrollPanePanel.setMinimumSize(new Dimension(w,scrollPanePanel.getHeight()));
        scrollPanePanel.setSize(w, scrollPanePanel.getHeight());
        scrollPanePanel.setPreferredSize(new Dimension(w, scrollPanePanel.getHeight()));
        
        
        original.setMaximumSize(new Dimension(w,h));
                        original.setMinimumSize(new Dimension(w,h));
                original.setSize(new Dimension(w,h));
                original.setPreferredSize(new Dimension(w,h));
        original.setText(html);
        
        complement.setMaximumSize(new Dimension(w,h));
                        complement.setMinimumSize(new Dimension(w,h));
                complement.setSize(new Dimension(w,h));
                complement.setPreferredSize(new Dimension(w,h));
                
        basePairs.setMaximumSize(new Dimension(w,h));
                        basePairs.setMinimumSize(new Dimension(w,h));
                basePairs.setSize(new Dimension(w,h));
                basePairs.setPreferredSize(new Dimension(w,h));

        labels.setMaximumSize(new Dimension(w,h));
                        labels.setMinimumSize(new Dimension(w,h));
                labels.setSize(new Dimension(w,h));
                labels.setPreferredSize(new Dimension(w,h));

        
       
        
        System.out.println("max size: " + original.getMaximumSize());
        System.out.println(w);
        System.out.println(original.getSize());
        
       
        
        
        
        //compute bp
        //note, we are using monospaced
        String b = "";
        String l = "";
        for(int i = 1; i <= html.length(); i++) {

            if(i == 1) {
                b += "1";
                l += "|";
            }
            else if(i % 10 == 0) {
                b += i;
                l += "|";
            }
            else if(i % 10 == 1 && i > 10 && i < 100) {
                b += "";
                l += "-";
            }
            else if(i % 10 == 1 && i > 100 && i < 999) {
                b += "  ";
                l += "----";
                i+=3;
            }
            else if(i % 10 == 1 && i > 1000 && i < 9999) {
                b += "  ";
                l += "-----";
                i+=4;
            }
            else {
                b += " ";
                l += "-";
            }
        }
        basePairs.setText(b);
        labels.setText(l);
        
        if(plasmid.isFindingComplementSequence()) {
            plasmid.setLabelWithComplementWhenDone(complement);
            complement.setText("Finding complement...");
        }
        else {
            complement.setText(plasmid.getComplementSequence());
        }

    }
    
    private String generateHTMLForSequence() {
        return plasmid.getSequence();
        /*
        String s = plasmid.getSequence();
        
        String html = "<html>";
        for(int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            String color = null;
            if(c == 'A')
                color = A_COLOR;
            else if(c == 'T') 
                color = T_COLOR;
            else if(c == 'G')
                color = G_COLOR;
            else if(c == 'C')
                color = C_COLOR;
            else {
                //TODO: other characters
                JOptionPane.showMessageDialog(this,"Unsupported DNA sequence character: " + c+". An Error will now occur");
            }
            
            String temp = "<font color=\"" + color + "\">" + c + "</font>";
            html += temp;
        }
        
        html += "</html>";
        return html;
        * 
        */
    }

    public JPanel getJPanel() {
        return scrollPanePanel;
    }
}
