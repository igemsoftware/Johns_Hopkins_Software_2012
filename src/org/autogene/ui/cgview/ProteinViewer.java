/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.autogene.ui.cgview;

import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.util.ArrayList;
import java.util.Map;
import javax.swing.table.DefaultTableModel;
import org.autogene.ui.frames.BaseInternalFrame;
import org.biojava.bio.structure.AminoAcid;
import org.biojava3.core.sequence.DNASequence;
import org.biojava3.core.sequence.compound.AminoAcidCompound;
import org.biojava3.core.sequence.template.Sequence;
import org.biojava3.core.sequence.transcription.Frame;
import org.biojava3.core.sequence.transcription.TranscriptionEngine;

/**
 *
 * @author Emily
 */
public class ProteinViewer extends BaseInternalFrame  {

    /**
     * Creates new form ProteinViewer
     */
    public ProteinViewer(String seq) {
        initComponents();
        sequence = seq;
        Map<Frame, Sequence<AminoAcidCompound>> frames = getProteinSequence(seq);
        
        
        ArrayList<String[]> values = new ArrayList<String[]>();
       
            
        String[] tempF;
            
        for(Frame f: frames.keySet())
        {
            tempF = new String[2];

            tempF[0] = f.toString();
            tempF[1] = frames.get(f).getSequenceAsString(); 
            
            values.add(tempF);
        }
        
        Object[][] finalValues = new Object[values.size()][2];
        
        
        
        int i = 0;
        for(Object[] l: values)
        {
            
            finalValues[i] = l;
            i++;
        }

        DefaultTableModel model = new DefaultTableModel(
            finalValues,
            new String [] {
                "Frame", "Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
     
                return canEdit [columnIndex];
            }
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
 

        };
        

        jTable1.setModel(model);
        
        //setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Frame", "Sequence"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
 
    
    public static Map<Frame, Sequence<AminoAcidCompound>> getProteinSequence(String seq) 
    {
        
        DNASequence dna = new DNASequence(seq.toUpperCase());
        
        TranscriptionEngine te = TranscriptionEngine.getDefault();
        Frame[] frames = Frame.getAllFrames();
        Map<Frame, Sequence<AminoAcidCompound>> results = te.multipleFrameTranslation(dna, frames);
        
        return results;
    }
    
    private static String sequence;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

}
